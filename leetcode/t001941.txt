1941. 检查是否所有字符出现次数相同

给你一个字符串 s ，如果 s 是一个 好 字符串，请你返回 true ，否则请返回 false 。

如果 s 中出现过的 所有 字符的出现次数 相同 ，那么我们称字符串 s 是 好 字符串。

 

示例 1：

输入：s = "abacbc"
输出：true
解释：s 中出现过的字符为 'a'，'b' 和 'c' 。s 中所有字符均出现 2 次。

示例 2：

输入：s = "aaabb"
输出：false
解释：s 中出现过的字符为 'a' 和 'b' 。
'a' 出现了 3 次，'b' 出现了 2 次，两者出现次数不同。

 

提示：

    1 <= s.length <= 1000
    s 只包含小写英文字母。

解：
使用Counter，注意不要使用求平均数，要错 97+
```py
class Solution:
    def areOccurrencesEqual(self, s: str) -> bool:
        l_s = set(collections.Counter(s).values())
        return len(l_s) == 1
```
---



1941. 检查是否所有字符出现次数相同    --2

给你一个字符串 s ，如果 s 是一个 好 字符串，请你返回 true ，否则请返回 false 。

如果 s 中出现过的 所有 字符的出现次数 相同 ，那么我们称字符串 s 是 好 字符串。

 

示例 1：

输入：s = "abacbc"
输出：true
解释：s 中出现过的字符为 'a'，'b' 和 'c' 。s 中所有字符均出现 2 次。

示例 2：

输入：s = "aaabb"
输出：false
解释：s 中出现过的字符为 'a' 和 'b' 。
'a' 出现了 3 次，'b' 出现了 2 次，两者出现次数不同。

 

提示：

    1 <= s.length <= 1000
    s 只包含小写英文字母。

解：
go使用两个map 100+
```go
func areOccurrencesEqual(s string) bool {
    map_s := make(map[rune]int)
    for _, v := range s{
        if _, ok := map_s[v]; ok {
            map_s[v] += 1
        }else{
            map_s[v] = 0
        }
    }
    map_d := make(map[int]int)
    for _, v := range map_s{
        if _, ok := map_d[v]; ok{
            map_d[v] += 1
        }else{
            map_d[v] = 0
        }
    }
    return len(map_d) == 1
}
```
---
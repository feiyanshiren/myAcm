2605. 从两个数字数组里生成最小数字
提示
简单
11
相关企业
给你两个只包含 1 到 9 之间数字的数组 nums1 和 nums2 ，每个数组中的元素 互不相同 ，请你返回 最小 的数字，两个数组都 至少 包含这个数字的某个数位。

 

示例 1：

输入：nums1 = [4,1,3], nums2 = [5,7]
输出：15
解释：数字 15 的数位 1 在 nums1 中出现，数位 5 在 nums2 中出现。15 是我们能得到的最小数字。

示例 2：

输入：nums1 = [3,5,2,6], nums2 = [3,1,7]
输出：3
解释：数字 3 的数位 3 在两个数组中都出现了。

 

提示：

    1 <= nums1.length, nums2.length <= 9
    1 <= nums1[i], nums2[i] <= 9
    每个数组中，元素 互不相同 。



解：
使用 set

```py
class Solution:
    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:
        m1 = min(nums1)
        m2 = min(nums2)
        s1 = set(nums1)
        s2 = set(nums2)
        s3 = s1 & s2
        res = 0
        if m1 < m2:
            res = m1*10 + m2
        elif m1 == m2:
            res = m1
        else:
            res = m2*10 + m1
        if s3:
            m3 = min(s3)
            res = min(res, m3)
        return res
```

---

 
2605. 从两个数字数组里生成最小数字    --2
提示
简单
11
相关企业
给你两个只包含 1 到 9 之间数字的数组 nums1 和 nums2 ，每个数组中的元素 互不相同 ，请你返回 最小 的数字，两个数组都 至少 包含这个数字的某个数位。

 

示例 1：

输入：nums1 = [4,1,3], nums2 = [5,7]
输出：15
解释：数字 15 的数位 1 在 nums1 中出现，数位 5 在 nums2 中出现。15 是我们能得到的最小数字。

示例 2：

输入：nums1 = [3,5,2,6], nums2 = [3,1,7]
输出：3
解释：数字 3 的数位 3 在两个数组中都出现了。

 

提示：

    1 <= nums1.length, nums2.length <= 9
    1 <= nums1[i], nums2[i] <= 9
    每个数组中，元素 互不相同 。



解：
使用 有点慢

```go
func minNumber(nums1 []int, nums2 []int) int {
	sort.Ints(nums1)
	sort.Ints(nums2)
	res := 0
	if nums1[0] == nums2[0] {
		return nums1[0]
	} else if nums1[0] < nums2[0] {
		res = nums1[0]*10 + nums2[0]
	} else if nums1[0] > nums2[0] {
		res = nums2[0]*10 + nums1[0]
	}
	k := 100000
	for i := 0; i < len(nums1); i++ {
		for j := 0; j < len(nums2); j++ {
			if nums1[i] == nums2[j] {
				k = nums1[i]
				break
			}
		}
		if k != 100000 {
			break
		}
	}
	if k < res {
		return k
	} else {
		return res
	}
}
```

---


2605. 从两个数字数组里生成最小数字    --3
提示
简单
11
相关企业
给你两个只包含 1 到 9 之间数字的数组 nums1 和 nums2 ，每个数组中的元素 互不相同 ，请你返回 最小 的数字，两个数组都 至少 包含这个数字的某个数位。

 

示例 1：

输入：nums1 = [4,1,3], nums2 = [5,7]
输出：15
解释：数字 15 的数位 1 在 nums1 中出现，数位 5 在 nums2 中出现。15 是我们能得到的最小数字。

示例 2：

输入：nums1 = [3,5,2,6], nums2 = [3,1,7]
输出：3
解释：数字 3 的数位 3 在两个数组中都出现了。

 

提示：

    1 <= nums1.length, nums2.length <= 9
    1 <= nums1[i], nums2[i] <= 9
    每个数组中，元素 互不相同 。



解：
使用 改掉双重循环

```go
func minNumber(nums1 []int, nums2 []int) int {
	m1 := 10000
	m2 := 10000
	for i := 0; i < len(nums1); i++ {
		if nums1[i] < m1 {
			m1 = nums1[i]
		}
	}
	for i := 0; i < len(nums2); i++ {
		if nums2[i] < m2 {
			m2 = nums2[i]
		}
	}
	s3 := make(map[int]int)
	for i := 0; i < len(nums1); i++ {
		s3[nums1[i]] = 0
	}
	for i := 0; i < len(nums2); i++ {
		_, ok := s3[nums2[i]]
		if ok {
			s3[nums2[i]] += 1
		} else {
			s3[nums2[i]] = 0
		}
	}
	m3 := 10000
	for k, v := range s3 {
		if v > 0 {
			if k < m3 {
				m3 = k
			}
		}
	}
	res := 0
	if m1 == m2 {
		return m1
	} else if m1 < m2 {
		res = m1*10 + m2
	} else if m2 < m1 {
		res = m2*10 + m1
	}
	if m3 != 10000 {
		if m3 < res {
			return m3
		}
	}
	return res
}
```

---
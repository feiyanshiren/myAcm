961. 重复 N 次的元素

在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。

返回重复了 N 次的那个元素。

 

示例 1：

输入：[1,2,3,3]
输出：3

示例 2：

输入：[2,1,2,5,3,2]
输出：2

示例 3：

输入：[5,1,5,2,5,3,5,4]
输出：5

 

提示：

    4 <= A.length <= 10000
    0 <= A[i] < 10000
    A.length 为偶数

解：
使用字典，判断数量

```py
class Solution:
    def repeatedNTimes(self, A: List[int]) -> int:
        l = len(A)
        n = l // 2
        b = dict(collections.Counter(A))
        for k, v in b.items():
            if v == n:
                return k
        return None
```


961. 重复 N 次的元素    --2

在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。

返回重复了 N 次的那个元素。

 

示例 1：

输入：[1,2,3,3]
输出：3

示例 2：

输入：[2,1,2,5,3,2]
输出：2

示例 3：

输入：[5,1,5,2,5,3,5,4]
输出：5

 

提示：

    4 <= A.length <= 10000
    0 <= A[i] < 10000
    A.length 为偶数

解：
使用字典，判断数量
其实按照提议，可以减少判断

```py
class Solution(object):
    def repeatedNTimes(self, A):
        count = collections.Counter(A)
        for k in count:
            if count[k] > 1:
                return k
```


961. 重复 N 次的元素    --3

在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。

返回重复了 N 次的那个元素。

 

示例 1：

输入：[1,2,3,3]
输出：3

示例 2：

输入：[2,1,2,5,3,2]
输出：2

示例 3：

输入：[5,1,5,2,5,3,5,4]
输出：5

 

提示：

    4 <= A.length <= 10000
    0 <= A[i] < 10000
    A.length 为偶数

解：
比较

想法和算法

一旦找到一个重复元素，那么一定就是答案。我们称这个答案为主要元素。

考虑所有长度为 4 的子序列，在子序列中一定至少含有两个主要元素。

这是因为：

    长度为 2 的子序列中都是主要元素，或者；
    每个长度为 2 的子序列都恰好含有 1 个主要元素，这意味着长度为 4 的子序列一定含有 2 个主要元素。

因此，只需要比较所有距离为 1，2 或者 3 的邻居元素即可。

```py
class Solution(object):
    def repeatedNTimes(self, A):
        for k in xrange(1, 4):
            for i in xrange(len(A) - k):
                if A[i] == A[i+k]:
                    return A[i]

```
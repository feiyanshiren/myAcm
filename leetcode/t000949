949. 给定数字能组成的最大时间

给定一个由 4 位数字组成的数组，返回可以设置的符合 24 小时制的最大时间。

最小的 24 小时制时间是 00:00，而最大的是 23:59。从 00:00 （午夜）开始算起，过得越久，时间越大。

以长度为 5 的字符串返回答案。如果不能确定有效时间，则返回空字符串。

 

示例 1：

输入：[1,2,3,4]
输出："23:41"

示例 2：

输入：[5,5,5,5]
输出：""

 

提示：

    A.length == 4
    0 <= A[i] <= 9

解：
本来想使用自己弄条件一个一个来，最后发现老是漏掉一些问题，所以就全排列暴力了。
```py
from itertools import permutations
class Solution:
    def largestTimeFromDigits(self, A: List[int]) -> str:
        b = set(permutations(A, 4))
        c = []
        for i in b:
            if i[0] > 2:
                continue
            if i[0] == 2 and i[1] > 3:
                continue
            if i[2] > 5:
                continue
            c.append(i)
        
        # print(c)
        if c:
            c.sort()
            return str(c[-1][0]) + str(c[-1][1]) + ":" + str(c[-1][2]) + str(c[-1][3])
        else:
            return ""
```
---


949. 给定数字能组成的最大时间    --2

给定一个由 4 位数字组成的数组，返回可以设置的符合 24 小时制的最大时间。

最小的 24 小时制时间是 00:00，而最大的是 23:59。从 00:00 （午夜）开始算起，过得越久，时间越大。

以长度为 5 的字符串返回答案。如果不能确定有效时间，则返回空字符串。

 

示例 1：

输入：[1,2,3,4]
输出："23:41"

示例 2：

输入：[5,5,5,5]
输出：""

 

提示：

    A.length == 4
    0 <= A[i] <= 9

解：
全排列暴力简化版本。
```py
from itertools import permutations
class Solution:
    def largestTimeFromDigits(self, A):
        max_time = 0
        res = ''
        for ht,  hb, mt, mb in permutations(A):
            hour, minute = ht * 10 + hb, mt * 10 + mb
            t = hour * 60 + minute
            if hour < 24 and minute < 60 and t >= max_time:
                res = "{}{}:{}{}".format(ht, hb, mt, mb)
                max_time = t
        return res
```
---
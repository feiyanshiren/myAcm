970. 强整数

给定两个正整数 x 和 y，如果某一整数等于 x^i + y^j，其中整数 i >= 0 且 j >= 0，那么我们认为该整数是一个强整数。

返回值小于或等于 bound 的所有强整数组成的列表。

你可以按任何顺序返回答案。在你的回答中，每个值最多出现一次。

 

示例 1：

输入：x = 2, y = 3, bound = 10
输出：[2,3,4,5,7,9,10]
解释： 
2 = 2^0 + 3^0
3 = 2^1 + 3^0
4 = 2^0 + 3^1
5 = 2^1 + 3^1
7 = 2^2 + 3^1
9 = 2^3 + 3^0
10 = 2^0 + 3^2

示例 2：

输入：x = 3, y = 5, bound = 15
输出：[2,4,6,8,10,14]

 

提示：

    1 <= x <= 100
    1 <= y <= 100
    0 <= bound <= 10^6

解：
超时了，不过想法简单,就是循环

```py
class Solution:
    def powerfulIntegers(self, x: int, y: int, bound: int) -> List[int]:
        a = set()
        i = 0
        j = 0
        for i in range(bound):
            for j in range(bound):
                q = x ** i + y ** j
                if q <= bound:
                    a.add(q)
                else:
                    break
        return a
```



---


970. 强整数    --2

给定两个正整数 x 和 y，如果某一整数等于 x^i + y^j，其中整数 i >= 0 且 j >= 0，那么我们认为该整数是一个强整数。

返回值小于或等于 bound 的所有强整数组成的列表。

你可以按任何顺序返回答案。在你的回答中，每个值最多出现一次。

 

示例 1：

输入：x = 2, y = 3, bound = 10
输出：[2,3,4,5,7,9,10]
解释： 
2 = 2^0 + 3^0
3 = 2^1 + 3^0
4 = 2^0 + 3^1
5 = 2^1 + 3^1
7 = 2^2 + 3^1
9 = 2^3 + 3^0
10 = 2^0 + 3^2

示例 2：

输入：x = 3, y = 5, bound = 15
输出：[2,4,6,8,10,14]

 

提示：

    1 <= x <= 100
    1 <= y <= 100
    0 <= bound <= 10^6

解：
在第一版的基础上改了些条件判断，不过还是超时了，不过想法简单,就是循环，
后来发现需要判断 x y = 1 的情况。要不然一直超时

```py
class Solution:
    def powerfulIntegers(self, x: int, y: int, bound: int) -> List[int]:
        a = set()
        i = 0
        j = 0
        b1 = bound
        b2 = bound
        if x == 1:
            b1 = 1
        if y == 1:
            b2 = 1
        for i in range(b1):
            q = x ** i
            if q <= bound + 1:
                for j in range(b2):
                    q2 = q + y ** j
                    if q2 <= bound:
                        a.add(q2)
                    else:
                        break
            else:
                break
        return a
```
[200~剑指 Offer 53 - I. 在排序数组中查找数字 I
统计一个数字在排序数组中出现的次数。

 

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: 2
示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: 0
 

限制：

0 <= 数组长度 <= 50000

 

注意：本题与主站 34 题相同（仅返回值不同）：https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/

解：
使用count
```py
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        return nums.count(target)
```
---

剑指 Offer 53 - I. 在排序数组中查找数字 I    --2
统计一个数字在排序数组中出现的次数。

 

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: 2
示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: 0
 

限制：

0 <= 数组长度 <= 50000

 

注意：本题与主站 34 题相同（仅返回值不同）：https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/

解：
使用库二分
```py
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        return bisect.bisect(nums, target) - bisect.bisect_left(nums, target)
```
---


剑指 Offer 53 - I. 在排序数组中查找数字 I    --3
统计一个数字在排序数组中出现的次数。

 

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: 2
示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: 0
 

限制：

0 <= 数组长度 <= 50000

 

注意：本题与主站 34 题相同（仅返回值不同）：https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/

解：
手撸二分
```py
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left = 0
        l = len(nums)
        right = l - 1
        res = 0
        find_index = -1
        while left <= right:
            haf = (right - left) // 2 + left
            if nums[haf] == target:
                find_index = haf
                break
            elif nums[haf] > target:
                right = haf - 1
            else:
                left = haf + 1
        if find_index != -1:
            for i in range(find_index, l):
                if nums[i] == target:
                    res += 1
                else:
                    break
            for i in range(find_index - 1, -1, -1):
                if nums[i] == target:
                    res += 1
                else:
                    break
        return res
```
---

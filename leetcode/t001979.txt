1979. 找出数组的最大公约数
给你一个整数数组 nums ，返回数组中最大数和最小数的 最大公约数 。

两个数的 最大公约数 是能够被两个数整除的最大正整数。

 

示例 1：

输入：nums = [2,5,6,9,10]
输出：2
解释：
nums 中最小的数是 2
nums 中最大的数是 10
2 和 10 的最大公约数是 2
示例 2：

输入：nums = [7,5,6,8,3]
输出：1
解释：
nums 中最小的数是 3
nums 中最大的数是 8
3 和 8 的最大公约数是 1
示例 3：

输入：nums = [3,3]
输出：3
解释：
nums 中最小的数是 3
nums 中最大的数是 3
3 和 3 的最大公约数是 3
 

提示：

2 <= nums.length <= 1000
1 <= nums[i] <= 1000


解，使用gcd 89+
```py
class Solution:
    def findGCD(self, nums: List[int]) -> int:
        return math.gcd(min(nums), max(nums))
```


---


1979. 找出数组的最大公约数    --2
给你一个整数数组 nums ，返回数组中最大数和最小数的 最大公约数 。

两个数的 最大公约数 是能够被两个数整除的最大正整数。

 

示例 1：

输入：nums = [2,5,6,9,10]
输出：2
解释：
nums 中最小的数是 2
nums 中最大的数是 10
2 和 10 的最大公约数是 2
示例 2：

输入：nums = [7,5,6,8,3]
输出：1
解释：
nums 中最小的数是 3
nums 中最大的数是 8
3 和 8 的最大公约数是 1
示例 3：

输入：nums = [3,3]
输出：3
解释：
nums 中最小的数是 3
nums 中最大的数是 3
3 和 3 的最大公约数是 3
 

提示：

2 <= nums.length <= 1000
1 <= nums[i] <= 1000


解：
 go 语言的很多函数需要自己写
```go
func findGCD(nums []int) int {
    min_a, max_a := MinMax(nums)
    return gcd(min_a, max_a)
}


func gcd(x, y int) int {
    tmp := x % y
    if tmp > 0 {
        return gcd(y, tmp)
    } else {
        return y
    }
}

func MinMax(nums []int) (int,int) {
    min_a := 1001
    max_a := 0
    for _, v := range nums{
        if v > max_a{
            max_a = v
        }
        if v < min_a{
            min_a = v
        }
    }
    return min_a, max_a
}
```

---



1979. 找出数组的最大公约数    --3
给你一个整数数组 nums ，返回数组中最大数和最小数的 最大公约数 。

两个数的 最大公约数 是能够被两个数整除的最大正整数。

 

示例 1：

输入：nums = [2,5,6,9,10]
输出：2
解释：
nums 中最小的数是 2
nums 中最大的数是 10
2 和 10 的最大公约数是 2
示例 2：

输入：nums = [7,5,6,8,3]
输出：1
解释：
nums 中最小的数是 3
nums 中最大的数是 8
3 和 8 的最大公约数是 1
示例 3：

输入：nums = [3,3]
输出：3
解释：
nums 中最小的数是 3
nums 中最大的数是 3
3 和 3 的最大公约数是 3
 

提示：

2 <= nums.length <= 1000
1 <= nums[i] <= 1000


解：
 ruby，使用gcd
```rb
# @param {Integer[]} nums
# @return {Integer}
def find_gcd(nums)
    return nums.min().gcd(nums.max())
end
```

---
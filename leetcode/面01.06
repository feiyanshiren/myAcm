面试题 01.06. 字符串压缩
字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。

示例1:

 输入："aabcccccaaa"
 输出："a2b1c5a3"
示例2:

 输入："abbccd"
 输出："abbccd"
 解释："abbccd"压缩后为"a1b2c2d1"，比原字符串长度更长。
提示：

字符串长度在[0, 50000]范围内。

解：
循环使用两个数组 90 +

```py
class Solution:
    def compressString(self, S: str) -> str:
        list_s = []
        list_s2 = []
        len_S = len(S)
        if len_S == 0:
            return S
        else:
            list_s.append(S[0])
        for i in range(1, len_S):
            if S[i] in list_s:
                list_s.append(S[i])
            else:
                list_s2.append(list_s[0])
                list_s2.append(str(len(list_s)))
                list_s = [S[i]]
        if len(list_s) != 0:
            list_s2.append(list_s[0])
            list_s2.append(str(len(list_s)))
        if len(list_s2) < len_S:
            return "".join(list_s2)
        else:
            return S
```
---


面试题 01.06. 字符串压缩    --2
字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。

示例1:

 输入："aabcccccaaa"
 输出："a2b1c5a3"
示例2:

 输入："abbccd"
 输出："abbccd"
 解释："abbccd"压缩后为"a1b2c2d1"，比原字符串长度更长。
提示：

字符串长度在[0, 50000]范围内。

解：
循环使用两个数组,go语言版，分不高

```go
func compressString(S string) string {
    var list_s []string
    var list_s2 []string
    len_S := len(S)
    if len_S <= 1{
        return S
    }else{
        list_s = append(list_s, string(S[0]))
    }
    for i := 1; i < len_S; i++ {
        ss := string(S[i])
        if ss == list_s[0]{
            list_s = append(list_s, ss)
        }else{
            list_s2 = append(list_s2, list_s[0])
            list_s2 = append(list_s2, strconv.Itoa(len(list_s)))
            list_s = []string{ss}
        }
    }
    if len(list_s) != 0 {
        list_s2 = append(list_s2, list_s[0])
        list_s2 = append(list_s2, strconv.Itoa(len(list_s)))
    }
    if len(list_s2) < len_S{
        return strings.Join(list_s2, "")
    }else{
        return S
    }
}
```
---


面试题 01.06. 字符串压缩    --3
字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。

示例1:

 输入："aabcccccaaa"
 输出："a2b1c5a3"
示例2:

 输入："abbccd"
 输出："abbccd"
 解释："abbccd"压缩后为"a1b2c2d1"，比原字符串长度更长。
提示：

字符串长度在[0, 50000]范围内。

解：
使用byte append 字符串，效率高一点，内存小一些

```go
func compressString(S string) string {
    var list_s []byte
    var list_s2 []byte
    len_S := len(S)
    if len_S <= 1{
        return S
    }else{
        list_s = append(list_s, S[0])
    }
    for i := 1; i < len_S; i++ {
        ss := S[i]
        if ss == list_s[0]{
            list_s = append(list_s, ss)
        }else{
            list_s2 = append(list_s2, list_s[0])
            list_s2 = append(list_s2, []byte(strconv.Itoa(len(list_s)))...)
            list_s = []byte{ss}
        }
    }
    if len(list_s) != 0 {
        list_s2 = append(list_s2, list_s[0])
        list_s2 = append(list_s2, []byte(strconv.Itoa(len(list_s)))...)
    }
    if len(list_s2) < len_S{
        return string(list_s2)
    }else{
        return S
    }
}
```
---

# 788. 旋转数字    --2
#
# 我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。
#
# 如果一个数的每位数字被旋转以后仍然还是一个数字， 则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。
#
# 现在我们有一个正整数 N, 计算从 1 到 N 中有多少个数 X 是好数？
#
# 示例:
# 输入: 10
# 输出: 4
# 解释:
# 在[1, 10]中有四个好数： 2, 5, 6, 9。
# 注意 1 和 10 不是好数, 因为他们在旋转之后不变。
#
# 注意:
#
#     N 的取值范围是 [1, 10000]。
#
# 解：
# 根据第一种方法的打表法计算
#
# ```
# class Solution:
#     def rotatedDigits(self, N: int) -> int:
#         set_is = set([2, 5, 6, 9, 12, 15, 16, 19, 20, 21, 22, 25, 26, 28, 29, 50, 51, 52, 55, 56, 58, 59, 60, 61, 62, 65, 66, 68, 69, 82, 85, 86, 89, 90, 91, 92, 95, 96, 98, 99, 102, 105, 106, 109, 112, 115, 116, 119, 120, 121, 122, 125, 126, 128, 129, 150, 151, 152, 155, 156, 158, 159, 160, 161, 162, 165, 166, 168, 169, 182, 185, 186, 189, 190, 191, 192, 195, 196, 198, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 215, 216, 218, 219, 220, 221, 222, 225, 226, 228, 229, 250, 251, 252, 255, 256, 258, 259, 260, 261, 262, 265, 266, 268, 269, 280, 281, 282, 285, 286, 288, 289, 290, 291, 292, 295, 296, 298, 299, 500, 501, 502, 505, 506, 508, 509, 510, 511, 512, 515, 516, 518, 519, 520, 521, 522, 525, 526, 528, 529, 550, 551, 552, 555, 556, 558, 559, 560, 561, 562, 565, 566, 568, 569, 580, 581, 582, 585, 586, 588, 589, 590, 591, 592, 595, 596, 598, 599, 600, 601, 602, 605, 606, 608, 609, 610, 611, 612, 615, 616, 618, 619, 620, 621, 622, 625, 626, 628, 629, 650, 651, 652, 655, 656, 658, 659, 660, 661, 662, 665, 666, 668, 669, 680, 681, 682, 685, 686, 688, 689, 690, 691, 692, 695, 696, 698, 699, 802, 805, 806, 809, 812, 815, 816, 819, 820, 821, 822, 825, 826, 828, 829, 850, 851, 852, 855, 856, 858, 859, 860, 861, 862, 865, 866, 868, 869, 882, 885,
#         ...
#         ...
#         ...
#         total = 0
#         for i in range(1, N + 1):
#             if i in set_is:
#                 total += 1
#         return total
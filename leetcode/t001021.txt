1021. 删除最外层的括号

有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。

如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。

给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。

对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。

 

示例 1：

输入："(()())(())"
输出："()()()"
解释：
输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。

示例 2：

输入："(()())(())(()(()))"
输出："()()()()(())"
解释：
输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。

示例 3：

输入："()()"
输出：""
解释：
输入字符串为 "()()"，原语化分解得到 "()" + "()"，
删除每个部分中的最外层括号后得到 "" + "" = ""。

 

提示：

    S.length <= 10000
    S[i] 为 "(" 或 ")"
    S 是一个有效括号字符串

解：
利用栈记录括号

```py
class Solution:
    def removeOuterParentheses(self, S: str) -> str:
        z = []
        res = ""
        a = 0
        for i in range(len(S)):
            if S[i] == "(":
                if len(z) == 0:
                    a = i
                z.append(S[i])
            elif S[i] == ")":
                z.pop()
            if len(z) == 0:
                res += S[a + 1:i]
        return res
```
---


1021. 删除最外层的括号    --2

有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。

如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。

给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。

对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。

 

示例 1：

输入："(()())(())"
输出："()()()"
解释：
输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。

示例 2：

输入："(()())(())(()(()))"
输出："()()()()(())"
解释：
输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。

示例 3：

输入："()()"
输出：""
解释：
输入字符串为 "()()"，原语化分解得到 "()" + "()"，
删除每个部分中的最外层括号后得到 "" + "" = ""。

 

提示：

    S.length <= 10000
    S[i] 为 "(" 或 ")"
    S 是一个有效括号字符串

解：


先分析题目：可以通过将左右括号赋不同的值（比如左括号每有一个加1，右括号加-1）

( ( ) ( ) ) ( ( ) )

1 2 1 2 1 0 1 2 1 0

由于括号的对称性，可以看出只要是左括号'('其值大于1就应该加入，右括号')'只要大于0就加入


```go
func removeOuterParentheses(S string) string {
    l := 0
    res := ""
    for i := 0; i < len(S); i ++{
        if S[i] == '('{
            l += 1
            if l > 1{
                res += string(S[i])
            }
        }else{
            if l > 1{
                res += string(S[i])
            }
            l -= 1
        }
    }
    return res
}
```
---





# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sumRootToLeaf(self, root: TreeNode) -> int:
        self.h = 0
        def sub(node, s):
            s += str(node.val)
            if node.left:
                sub(node.left, s)
            if node.right:
                sub(node.right, s)
            if not node.left and not node.right:
                self.h += int(s, 2)
        sub(root, "")
        return self.h


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sumRootToLeaf(self, root: TreeNode) -> int:
        self.h = 0
        def sub(node, s):
            if not node:
                return
            s = s << 1
            s = s | node.val
            if not node.left and not node.right:
                self.h += s
            else:
                sub(node.left, s)
                sub(node.right, s)
        sub(root, 0)
        return self.h
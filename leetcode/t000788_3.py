# 788. 旋转数字    --3
#
# 我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。
#
# 如果一个数的每位数字被旋转以后仍然还是一个数字， 则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。
#
# 现在我们有一个正整数 N, 计算从 1 到 N 中有多少个数 X 是好数？
#
# 示例:
# 输入: 10
# 输出: 4
# 解释:
# 在[1, 10]中有四个好数： 2, 5, 6, 9。
# 注意 1 和 10 不是好数, 因为他们在旋转之后不变。
#
# 注意:
#
#     N 的取值范围是 [1, 10000]。
#
# 解：
# 累计型的打表,速度最快.
#
# ```
# class Solution:
#     def rotatedDigits(self, N: int) -> int:
#         list_is = [0, 1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, 7, 7, 8, 9, 10, 11, 11, 11, 12, 13, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 17, 18, 18, 18, 19, 20, 20, 21, 22, 23, 24, 25, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 31, 32, 32, 32, 33, 34, 35, 36, 36, 36, 37, 38, 38, 39, 40, 40, 40, 41, 41, 41, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 47, 47, 47, 48, 49, 50, 51, 51, 51, 52, 53, 53, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 58, 58, 59, 60, 60, 61, 62, 63, 64, 65, 65, 65, 66, 67, 67, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 71, 72, 72, 72, 73, 74, 75, 76, 76, 76, 77, 78, 78, 79, 80, 81, 82, 83, 83, 83, 84, 85, 85, 86, 87, 88, 89, 90, 90, 90, 91, 92, 92, 93, 94, 95, 96, 97, 97, 97, 98, 99, 99, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102, 103, 104, 104, 104, 105, 106, 106, 107, 108, 109, 110, 111, 111, 111, 112, 113, 113, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 116, 117, 118, 118, 118, 119, 120, 120, 121, 122, 123, 124, 125, 125, 125, 126, 127, 127, 128, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
#         ...
#         ...
#         ...
#         return list_is[N - 1]
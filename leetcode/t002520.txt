2520. 统计能整除数字的位数

给你一个整数 num ，返回 num 中能整除 num 的数位的数目。

如果满足 nums % val == 0 ，则认为整数 val 可以整除 nums 。

 

示例 1：

输入：num = 7
输出：1
解释：7 被自己整除，因此答案是 1 。

示例 2：

输入：num = 121
输出：2
解释：121 可以被 1 整除，但无法被 2 整除。由于 1 出现两次，所以返回 2 。

示例 3：

输入：num = 1248
输出：4
解释：1248 可以被它每一位上的数字整除，因此答案是 4 。

 

提示：

    1 <= num <= 109
    num 的数位中不含 0
	
解: 
转字符串
	
```py
class Solution:
    def countDigits3(self, num: int) -> int:
        str_num = str(num)
        res = 0
        for i in str_num:
            if num % int(i) == 0:
                res += 1
        return res
```

---


2520. 统计能整除数字的位数    --2

给你一个整数 num ，返回 num 中能整除 num 的数位的数目。

如果满足 nums % val == 0 ，则认为整数 val 可以整除 nums 。

 

示例 1：

输入：num = 7
输出：1
解释：7 被自己整除，因此答案是 1 。

示例 2：

输入：num = 121
输出：2
解释：121 可以被 1 整除，但无法被 2 整除。由于 1 出现两次，所以返回 2 。

示例 3：

输入：num = 1248
输出：4
解释：1248 可以被它每一位上的数字整除，因此答案是 4 。

 

提示：

    1 <= num <= 109
    num 的数位中不含 0
	
解: 
转字符串 精简版
	
```py
class Solution:
    def countDigits3(self, num: int) -> int:
        return sum(1 for digit in str(num) if digit != '0' and num % int(digit) == 0)
```

---



2520. 统计能整除数字的位数    --3

给你一个整数 num ，返回 num 中能整除 num 的数位的数目。

如果满足 nums % val == 0 ，则认为整数 val 可以整除 nums 。

 

示例 1：

输入：num = 7
输出：1
解释：7 被自己整除，因此答案是 1 。

示例 2：

输入：num = 121
输出：2
解释：121 可以被 1 整除，但无法被 2 整除。由于 1 出现两次，所以返回 2 。

示例 3：

输入：num = 1248
输出：4
解释：1248 可以被它每一位上的数字整除，因此答案是 4 。

 

提示：

    1 <= num <= 109
    num 的数位中不含 0
	
解: 
先模后除
	
```py
class Solution:
    def countDigits(self, num: int) -> int:
        res = 0
        number = num
        while number > 0:
            if num % (number % 10) == 0:
                res += 1
            number //= 10
        return res
```

---
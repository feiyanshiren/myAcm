1822. 数组元素积的符号

已知函数 signFunc(x) 将会根据 x 的正负返回特定值：

    如果 x 是正数，返回 1 。
    如果 x 是负数，返回 -1 。
    如果 x 是等于 0 ，返回 0 。

给你一个整数数组 nums 。令 product 为数组 nums 中所有元素值的乘积。

返回 signFunc(product) 。

 

示例 1：

输入：nums = [-1,-2,-3,-4,3,2,1]
输出：1
解释：数组中所有值的乘积是 144 ，且 signFunc(144) = 1

示例 2：

输入：nums = [1,5,0,2,-3]
输出：0
解释：数组中所有值的乘积是 0 ，且 signFunc(0) = 0

示例 3：

输入：nums = [-1,1,-1,1,-1]
输出：-1
解释：数组中所有值的乘积是 -1 ，且 signFunc(-1) = -1

 

提示：

    1 <= nums.length <= 1000
    -100 <= nums[i] <= 100

解：
使用reduce来暴力
```py
class Solution:
    def arraySign(self, nums: List[int]) -> int:
        res = reduce(lambda x, y: x * y, nums)
        if res > 0:
            return 1
        elif res < 0:
            return -1
        else:
            return 0
```
---


1822. 数组元素积的符号    --2

已知函数 signFunc(x) 将会根据 x 的正负返回特定值：

    如果 x 是正数，返回 1 。
    如果 x 是负数，返回 -1 。
    如果 x 是等于 0 ，返回 0 。

给你一个整数数组 nums 。令 product 为数组 nums 中所有元素值的乘积。

返回 signFunc(product) 。

 

示例 1：

输入：nums = [-1,-2,-3,-4,3,2,1]
输出：1
解释：数组中所有值的乘积是 144 ，且 signFunc(144) = 1

示例 2：

输入：nums = [1,5,0,2,-3]
输出：0
解释：数组中所有值的乘积是 0 ，且 signFunc(0) = 0

示例 3：

输入：nums = [-1,1,-1,1,-1]
输出：-1
解释：数组中所有值的乘积是 -1 ，且 signFunc(-1) = -1

 

提示：

    1 <= nums.length <= 1000
    -100 <= nums[i] <= 100

解：
其实可以提前返回, 99+
```py
class Solution:
    def arraySign(self, nums: List[int]) -> int:
        res = 1
        for i in nums:
            if i == 0:
                return 0
            elif i < 0:
                res *= -1
        return res
```
---



1822. 数组元素积的符号    --3

已知函数 signFunc(x) 将会根据 x 的正负返回特定值：

    如果 x 是正数，返回 1 。
    如果 x 是负数，返回 -1 。
    如果 x 是等于 0 ，返回 0 。

给你一个整数数组 nums 。令 product 为数组 nums 中所有元素值的乘积。

返回 signFunc(product) 。

 

示例 1：

输入：nums = [-1,-2,-3,-4,3,2,1]
输出：1
解释：数组中所有值的乘积是 144 ，且 signFunc(144) = 1

示例 2：

输入：nums = [1,5,0,2,-3]
输出：0
解释：数组中所有值的乘积是 0 ，且 signFunc(0) = 0

示例 3：

输入：nums = [-1,1,-1,1,-1]
输出：-1
解释：数组中所有值的乘积是 -1 ，且 signFunc(-1) = -1

 

提示：

    1 <= nums.length <= 1000
    -100 <= nums[i] <= 100

解：
go语言版其实可以提前返回, 93+
```go
func arraySign(nums []int) int {
    res := 1
    for _, v := range nums{
        if v == 0 {
            return 0
        }else if v < 0 {
            res *= -1
        }
    }
    return res
}
```
---

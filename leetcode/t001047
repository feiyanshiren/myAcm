1047. 删除字符串中的所有相邻重复项

给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。

在 S 上反复执行重复项删除操作，直到无法继续删除。

在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。

 

示例：

输入："abbaca"
输出："ca"
解释：
例如，在 "abbaca" 中，我们可以删除 "bb" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 "aaca"，其中又只有 "aa" 可以执行重复项删除操作，所以最后的字符串为 "ca"。

 

提示：

    1 <= S.length <= 20000
    S 仅由小写英文字母组成。

解：
两重循环模拟，速度慢
```py
class Solution:
    def removeDuplicates(self, S: str) -> str:
        t = 1
        while t:
            t = 0
            for i in range(len(S) - 1):
                if S[i] == S[i + 1]:
                    t = 1
                    S = S.replace(S[i] + S[i], "")
                    break
        return S
```
---


1047. 删除字符串中的所有相邻重复项    --2

给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。

在 S 上反复执行重复项删除操作，直到无法继续删除。

在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。

 

示例：

输入："abbaca"
输出："ca"
解释：
例如，在 "abbaca" 中，我们可以删除 "bb" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 "aaca"，其中又只有 "aa" 可以执行重复项删除操作，所以最后的字符串为 "ca"。

 

提示：

    1 <= S.length <= 20000
    S 仅由小写英文字母组成。

解：
使用栈 
```py
class Solution:
    def removeDuplicates(self, S: str) -> str:
        s = []
        for i in S:
            if s and s[-1] == i:
                s.pop()
            else:
                s.append(i)
        return "".join(s)
```
---


1047. 删除字符串中的所有相邻重复项    --3

给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。

在 S 上反复执行重复项删除操作，直到无法继续删除。

在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。

 

示例：

输入："abbaca"
输出："ca"
解释：
例如，在 "abbaca" 中，我们可以删除 "bb" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 "aaca"，其中又只有 "aa" 可以执行重复项删除操作，所以最后的字符串为 "ca"。

 

提示：

    1 <= S.length <= 20000
    S 仅由小写英文字母组成。

解：
使用栈 go 语言版 ，注意string 遍历里面是 byte，utf-8 的 byte 也可以用 rune。比直接用string快
```go
func removeDuplicates(S string) string {
    var s []rune
    for _, v := range S{
        if len(s) != 0 && s[len(s) - 1] == v{
            s = s[: len(s) - 1]
        }else{
            s = append(s, v)
        }
    }
    return string(s)
}
```
---

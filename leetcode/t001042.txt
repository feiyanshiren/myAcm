1042. 不邻接植花

有 N 个花园，按从 1 到 N 标记。在每个花园中，你打算种下四种花之一。

paths[i] = [x, y] 描述了花园 x 到花园 y 的双向路径。

另外，没有花园有 3 条以上的路径可以进入或者离开。

你需要为每个花园选择一种花，使得通过路径相连的任何两个花园中的花的种类互不相同。

以数组形式返回选择的方案作为答案 answer，其中 answer[i] 为在第 (i+1) 个花园中种植的花的种类。花的种类用  1, 2, 3, 4 表示。保证存在答案。

 

示例 1：

输入：N = 3, paths = [[1,2],[2,3],[3,1]]
输出：[1,2,3]

示例 2：

输入：N = 4, paths = [[1,2],[3,4]]
输出：[1,2,1,2]

示例 3：

输入：N = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
输出：[1,2,3,4]

 

提示：

    1 <= N <= 10000
    0 <= paths.size <= 20000
    不存在花园有 4 条或者更多路径可以进入或离开。
    保证存在答案。

解：
图的题不好理解
```py
class Solution:
    def gardenNoAdj(self, N: int, paths: List[List[int]]) -> List[int]:
        # 思路: 对于当前的某一个花园，剔除掉与它邻接花园的花的种类，从剩下的种类中选一种即可。
        # 1. 构建邻接矩阵G; 2. 用res列表保存当前花园花的种类
        res = [0]*N
        G = [[] for _ in range(N)]
        for x, y in paths:
            G[x - 1].append(y - 1)
            G[y - 1].append(x - 1)
        for i in range(N):
            # 对于当前花园, 排除掉邻接的花园的花种就ok了，然后pop出一种
            res[i] = ({1,2,3,4} - {res[j] for j in G[i]}).pop()
        return res
```
---


1042. 不邻接植花    --2

有 N 个花园，按从 1 到 N 标记。在每个花园中，你打算种下四种花之一。

paths[i] = [x, y] 描述了花园 x 到花园 y 的双向路径。

另外，没有花园有 3 条以上的路径可以进入或者离开。

你需要为每个花园选择一种花，使得通过路径相连的任何两个花园中的花的种类互不相同。

以数组形式返回选择的方案作为答案 answer，其中 answer[i] 为在第 (i+1) 个花园中种植的花的种类。花的种类用  1, 2, 3, 4 表示。保证存在答案。

 

示例 1：

输入：N = 3, paths = [[1,2],[2,3],[3,1]]
输出：[1,2,3]

示例 2：

输入：N = 4, paths = [[1,2],[3,4]]
输出：[1,2,1,2]

示例 3：

输入：N = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
输出：[1,2,3,4]

 

提示：

    1 <= N <= 10000
    0 <= paths.size <= 20000
    不存在花园有 4 条或者更多路径可以进入或离开。
    保证存在答案。

解：
图的题不好理解
go 语言版
```go
func gardenNoAdj(N int, paths [][]int) []int {
    var res []int = make([]int, N)
    var G [][]int = make([][]int, N)
    // var f []int = []int{1, 2, 3, 4}
    for _, v := range paths{
        G[v[0] - 1] = append(G[v[0] - 1], v[1] - 1)
        G[v[1] - 1] = append(G[v[1] - 1], v[0] - 1)
    }
    // fmt.Println(G)
    for i := 0; i < N; i++ {
        // var a []int
        var b []int
        // fmt.Println(G[i])
        for _, j := range G[i]{
            b = append(b, res[j])
        }
        t := 0
        for _, v := range b{
            if 1 == v{
                t = 1
            }
        }
        if t == 0{
            res[i] = 1
            continue
        }
        t = 0
        for _, v := range b{
            if 2 == v{
                t = 1
            }
        }
        if t == 0{
            res[i] = 2
            continue
        }
        t = 0
        for _, v := range b{
            if 3 == v{
                t = 1
            }
        }
        if t == 0{
            res[i] = 3
            continue
        }
        t = 0
        for _, v := range b{
            if 4 == v{
                t = 1
            }
        }
        if t == 0{
            res[i] = 4
            continue
        }
        // fmt.Println(b)
    }
    return res
}
```
---

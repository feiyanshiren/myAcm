2231. 按奇偶性交换后的最大数字
给你一个正整数 num 。你可以交换 num 中 奇偶性 相同的任意两位数字（即，都是奇数或者偶数）。

返回交换 任意 次之后 num 的 最大 可能值。

 

示例 1：

输入：num = 1234
输出：3412
解释：交换数字 3 和数字 1 ，结果得到 3214 。
交换数字 2 和数字 4 ，结果得到 3412 。
注意，可能存在其他交换序列，但是可以证明 3412 是最大可能值。
注意，不能交换数字 4 和数字 1 ，因为它们奇偶性不同。
示例 2：

输入：num = 65875
输出：87655
解释：交换数字 8 和数字 6 ，结果得到 85675 。
交换数字 5 和数字 7 ，结果得到 87655 。
注意，可能存在其他交换序列，但是可以证明 87655 是最大可能值。
 

提示：

1 <= num <= 109


解：
拆分奇偶再排序插入
```py
class Solution:
    def largestInteger(self, num: int) -> int:
        list_num = list(str(num))
        list_j = [i for i in list_num if int(i) % 2 != 0]
        list_o = [i for i in list_num if int(i) % 2 == 0]
        list_j.sort()
        list_o.sort()
        res = []
        for i in list_num:
            if int(i) % 2 == 0:
                res.append(list_o.pop())
            else:
                res.append(list_j.pop())
        return int("".join(res))
```

---


2231. 按奇偶性交换后的最大数字    --2
给你一个正整数 num 。你可以交换 num 中 奇偶性 相同的任意两位数字（即，都是奇数或者偶数）。

返回交换 任意 次之后 num 的 最大 可能值。

 

示例 1：

输入：num = 1234
输出：3412
解释：交换数字 3 和数字 1 ，结果得到 3214 。
交换数字 2 和数字 4 ，结果得到 3412 。
注意，可能存在其他交换序列，但是可以证明 3412 是最大可能值。
注意，不能交换数字 4 和数字 1 ，因为它们奇偶性不同。
示例 2：

输入：num = 65875
输出：87655
解释：交换数字 8 和数字 6 ，结果得到 85675 。
交换数字 5 和数字 7 ，结果得到 87655 。                                                                                                                                       
注意，可能存在其他交换序列，但是可以证明 87655 是最大可能值。
 

提示：

1 <= num <= 109


解：
拆分奇偶再排序插入,修改少一次循环  99.9+
```py
class Solution:
    def largestInteger(self, num: int) -> int:
        str_num = str(num)
        list_o = []
        list_j = []
        for i in str_num:
            if int(i) % 2 == 0:
                list_o.append(i)
            else:
                list_j.append(i)
        list_j.sort()
        list_o.sort()
        res = []
        for i in str_num:
            if int(i) % 2 == 0:
                res.append(list_o.pop())
            else:
                res.append(list_j.pop())
        return int("".join(res))
```

---
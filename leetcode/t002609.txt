2609. 最长平衡子字符串
提示
简单
15
相关企业

给你一个仅由 0 和 1 组成的二进制字符串 s 。  

如果子字符串中 所有的 0 都在 1 之前 且其中 0 的数量等于 1 的数量，则认为 s 的这个子字符串是平衡子字符串。请注意，空子字符串也视作平衡子字符串。 

返回  s 中最长的平衡子字符串长度。

子字符串是字符串中的一个连续字符序列。

 

示例 1：

输入：s = "01000111"
输出：6
解释：最长的平衡子字符串是 "000111" ，长度为 6 。

示例 2：

输入：s = "00111"
输出：4
解释：最长的平衡子字符串是 "0011" ，长度为  4 。

示例 3：

输入：s = "111"
输出：0
解释：除了空子字符串之外不存在其他平衡子字符串，所以答案为 0 。

 

提示：

    1 <= s.length <= 50
    '0' <= s[i] <= '1'



解：
暴力枚举

```py
class Solution:
    def findTheLongestBalancedSubstring(self, s: str) -> int:
        res = 0
        l2 = len(s) // 2
        f = "0" * l2 + "1" * l2
        for i in range(l2):
            if f in s:
                res = len(f)
                break
            f = f[1:-1]
        return res
```

---


2609. 最长平衡子字符串    --2
提示
简单
15
相关企业

给你一个仅由 0 和 1 组成的二进制字符串 s 。  

如果子字符串中 所有的 0 都在 1 之前 且其中 0 的数量等于 1 的数量，则认为 s 的这个子字符串是平衡子字符串。请注意，空子字符串也视作平衡子字符串。 

返回  s 中最长的平衡子字符串长度。

子字符串是字符串中的一个连续字符序列。

 

示例 1：

输入：s = "01000111"
输出：6
解释：最长的平衡子字符串是 "000111" ，长度为 6 。

示例 2：

输入：s = "00111"
输出：4
解释：最长的平衡子字符串是 "0011" ，长度为  4 。

示例 3：

输入：s = "111"
输出：0
解释：除了空子字符串之外不存在其他平衡子字符串，所以答案为 0 。

 

提示：

    1 <= s.length <= 50
    '0' <= s[i] <= '1'



解：
暴力枚举

```go
func findTheLongestBalancedSubstring(s string) int {
	res := 0
	l2 := len(s) / 2
	f := make([]string, 0)
	for i := 0; i < l2; i++ {
		f = append(f, "0")
	}
	for i := 0; i < l2; i++ {
		f = append(f, "1")
	}
	for i := 0; i < l2; i++ {
		s2 := strings.Join(f, "")
		if strings.Contains(s, s2) {
			res = len(f)
			break
		}
		f = f[1 : len(f)-1]
	}
	return res
}
```

---
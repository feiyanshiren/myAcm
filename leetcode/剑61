剑指 Offer 61. 扑克牌中的顺子
从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。

 

示例 1:

输入: [1,2,3,4,5]
输出: True
 

示例 2:

输入: [0,0,1,2,5]
输出: True
 

限制：

数组长度为 5 

数组的数取值为 [0, 13] .

解：
先排序，然后在变量记录差值大于1的和0，然后比较0的数量和差值大于1的数量，中途如果差值=0就是false，90+%

```py
class Solution:
    def isStraight(self, nums: List[int]) -> bool:
        nums.sort()
        d = 0
        c = 0
        s = 0
        for i in nums:
            if i == 0:
                d += 1
            else:
                if s != 0:
                    k = i - s
                    if k <= 0:
                        return False
                    else:
                        c += k - 1
                s = i
        if d >= c:
            return True
        return False
```
---


剑指 Offer 61. 扑克牌中的顺子    --2
从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。

 

示例 1:

输入: [1,2,3,4,5]
输出: True
 

示例 2:

输入: [0,0,1,2,5]
输出: True
 

限制：

数组长度为 5 

数组的数取值为 [0, 13] .

解：
先排序，然后在变量记录差值大于1的和0，然后比较0的数量和差值大于1的数量，中途如果差值=0就是false，go语言版，双白

```go
func isStraight(nums []int) bool {
    sort.Ints(nums)
    d := 0
    c := 0
    s := 0
    for _, v := range nums{
        if v == 0{
            d += 1
        }else{
            if s != 0{
                k := v - s
                if k <= 0{
                    return false
                }else{
                    c += k - 1
                }
            }
            s = v
        }
    }
    if d >= c{
        return true
    }
    return false
}
```
---

5894. 至少在两个数组中出现的值
给你三个整数数组 nums1、nums2 和 nums3 ，请你构造并返回一个 不同 数组，且由 至少 在 两个 数组中出现的所有值组成。数组中的元素可以按 任意 顺序排列。
 

示例 1：

输入：nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]
输出：[3,2]
解释：至少在两个数组中出现的所有值为：
- 3 ，在全部三个数组中都出现过。
- 2 ，在数组 nums1 和 nums2 中出现过。
示例 2：

输入：nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]
输出：[2,3,1]
解释：至少在两个数组中出现的所有值为：
- 2 ，在数组 nums2 和 nums3 中出现过。
- 3 ，在数组 nums1 和 nums2 中出现过。
- 1 ，在数组 nums1 和 nums3 中出现过。
示例 3：

输入：nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]
输出：[]
解释：不存在至少在两个数组中出现的值。
 

提示：

1 <= nums1.length, nums2.length, nums3.length <= 100
1 <= nums1[i], nums2[j], nums3[k] <= 100


解：
使用set 集合运算
100+ 100+
```py
class Solution:
    def twoOutOfThree(self, nums1: List[int], nums2: List[int], nums3: List[int]) -> List[int]:
        a1 = set(nums1)
        a2 = set(nums2)
        a3 = set(nums3)
        b1 = a1 & a2
        b2 = a1 & a3
        b3 = a2 & a3
        return list(b1 | b2 | b3)
```
---



5894. 至少在两个数组中出现的值    --2
给你三个整数数组 nums1、nums2 和 nums3 ，请你构造并返回一个 不同 数组，且由 至少 在 两个 数组中出现的所有值组成。数组中的元素可以按 任意 顺序排列。
 

示例 1：

输入：nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]
输出：[3,2]
解释：至少在两个数组中出现的所有值为：
- 3 ，在全部三个数组中都出现过。
- 2 ，在数组 nums1 和 nums2 中出现过。
示例 2：

输入：nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]
输出：[2,3,1]
解释：至少在两个数组中出现的所有值为：
- 2 ，在数组 nums2 和 nums3 中出现过。
- 3 ，在数组 nums1 和 nums2 中出现过。
- 1 ，在数组 nums1 和 nums3 中出现过。
示例 3：

输入：nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]
输出：[]
解释：不存在至少在两个数组中出现的值。
 

提示：

1 <= nums1.length, nums2.length, nums3.length <= 100
1 <= nums1[i], nums2[j], nums3[k] <= 100


解：
使用map 计数运算 go语言
100+ 100+
```go
func twoOutOfThree(nums1 []int, nums2 []int, nums3 []int) []int {
    a1 := make(map[int] int)
    a2 := make(map[int] int)
    a3 := make(map[int] int)
    for _, v := range nums1{
        a1[v] = 1
    }
    for _, v := range nums2{
        a2[v] = 1
    }
    for _, v := range nums3{
        a3[v] = 1
    }
    b := make(map[int] int)
    for k, _ := range a1{
        b[k] = 1
    }
    for k, _ := range a2{
        if _, ok := b[k]; ok {
            b[k] += 1
        } else {
            b[k] = 1
        }
    }
    for k, _ := range a3{
        if _, ok := b[k]; ok {
            b[k] += 1
        } else {
            b[k] = 1
        }
    }
    res := make([]int, 0)
    for k, v := range b{
        if v >= 2{
            res = append(res, k)
        }
    }
    return res
}
```
---
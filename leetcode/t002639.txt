2639. 查询网格图中每一列的宽度
提示
简单
8
相关企业

给你一个下标从 0 开始的 m x n 整数矩阵 grid 。矩阵中某一列的宽度是这一列数字的最大 字符串长度 。

    比方说，如果 grid = [[-10], [3], [12]] ，那么唯一一列的宽度是 3 ，因为 -10 的字符串长度为 3 。

请你返回一个大小为 n 的整数数组 ans ，其中 ans[i] 是第 i 列的宽度。

一个有 len 个数位的整数 x ，如果是非负数，那么 字符串长度 为 len ，否则为 len + 1 。

 

示例 1：

输入：grid = [[1],[22],[333]]
输出：[3]
解释：第 0 列中，333 字符串长度为 3 。

示例 2：

输入：grid = [[-15,1,3],[15,7,12],[5,6,-2]]
输出：[3,1,2]
解释：
第 0 列中，只有 -15 字符串长度为 3 。
第 1 列中，所有整数的字符串长度都是 1 。
第 2 列中，12 和 -2 的字符串长度都为 2 。

 

提示：

    m == grid.length
    n == grid[i].length
    1 <= m, n <= 100 
    -109 <= grid[r][c] <= 109


解：
列行遍历求最大

```py
class Solution:
    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:
        def countDigits(num: int) -> int:
            ans = 0
            while num:
                num //= 10
                ans += 1
            return ans
        res = []
        l = len(grid)
        ll = len(grid[0])
        for i in range(ll):
            the_max = 1
            for j in range(l):
                if grid[j][i] >= 0:
                    the_max = max(the_max, countDigits(grid[j][i]))
                else:
                    the_max = max(the_max, countDigits(-grid[j][i]) + 1)
            res.append(the_max)
        return res
```

---


2639. 查询网格图中每一列的宽度    --2
提示
简单
8
相关企业

给你一个下标从 0 开始的 m x n 整数矩阵 grid 。矩阵中某一列的宽度是这一列数字的最大 字符串长度 。

    比方说，如果 grid = [[-10], [3], [12]] ，那么唯一一列的宽度是 3 ，因为 -10 的字符串长度为 3 。

请你返回一个大小为 n 的整数数组 ans ，其中 ans[i] 是第 i 列的宽度。

一个有 len 个数位的整数 x ，如果是非负数，那么 字符串长度 为 len ，否则为 len + 1 。

 

示例 1：

输入：grid = [[1],[22],[333]]
输出：[3]
解释：第 0 列中，333 字符串长度为 3 。

示例 2：

输入：grid = [[-15,1,3],[15,7,12],[5,6,-2]]
输出：[3,1,2]
解释：
第 0 列中，只有 -15 字符串长度为 3 。
第 1 列中，所有整数的字符串长度都是 1 。
第 2 列中，12 和 -2 的字符串长度都为 2 。

 

提示：

    m == grid.length
    n == grid[i].length
    1 <= m, n <= 100 
    -109 <= grid[r][c] <= 109


解：
列行遍历求最大, 使用字符串快些
82+
```py
def findColumnWidth(self, grid: List[List[int]]) -> List[int]:
        res = []
        for i in range(len(grid[0])):
            the_max = 1
            for j in range(len(grid)):
                the_max = max(the_max, len(str(grid[j][i])))
            res.append(the_max)
        return res
```

---


2639. 查询网格图中每一列的宽度    --3
提示
简单
8
相关企业

给你一个下标从 0 开始的 m x n 整数矩阵 grid 。矩阵中某一列的宽度是这一列数字的最大 字符串长度 。

    比方说，如果 grid = [[-10], [3], [12]] ，那么唯一一列的宽度是 3 ，因为 -10 的字符串长度为 3 。

请你返回一个大小为 n 的整数数组 ans ，其中 ans[i] 是第 i 列的宽度。

一个有 len 个数位的整数 x ，如果是非负数，那么 字符串长度 为 len ，否则为 len + 1 。

 

示例 1：

输入：grid = [[1],[22],[333]]
输出：[3]
解释：第 0 列中，333 字符串长度为 3 。

示例 2：

输入：grid = [[-15,1,3],[15,7,12],[5,6,-2]]
输出：[3,1,2]
解释：
第 0 列中，只有 -15 字符串长度为 3 。
第 1 列中，所有整数的字符串长度都是 1 。
第 2 列中，12 和 -2 的字符串长度都为 2 。

 

提示：

    m == grid.length
    n == grid[i].length
    1 <= m, n <= 100 
    -109 <= grid[r][c] <= 109


解：
列行遍历求最大,注意最好要the_max
86+  
```go
func findColumnWidth(grid [][]int) []int {
	res := make([]int, len(grid[0]))
	for i := 0; i < len(grid[0]); i++ {
		the_max := 1
		for j := 0; j < len(grid); j++ {
			if grid[j][i] >= 0 {
				cc := countDigits(grid[j][i])
				if cc > the_max {
					the_max = cc
				}
			} else {
				cc := countDigits(-grid[j][i]) + 1
				if cc > the_max {
					the_max = cc
				}
			}
		}
		res[i] = the_max
	}
	return res
}

func countDigits(num int) int {
	ans := 0
	for num > 0 {
		num /= 10
		ans += 1
	}
	return ans
}
```

---


2639. 查询网格图中每一列的宽度    --4
提示
简单
8
相关企业

给你一个下标从 0 开始的 m x n 整数矩阵 grid 。矩阵中某一列的宽度是这一列数字的最大 字符串长度 。

    比方说，如果 grid = [[-10], [3], [12]] ，那么唯一一列的宽度是 3 ，因为 -10 的字符串长度为 3 。

请你返回一个大小为 n 的整数数组 ans ，其中 ans[i] 是第 i 列的宽度。

一个有 len 个数位的整数 x ，如果是非负数，那么 字符串长度 为 len ，否则为 len + 1 。

 

示例 1：

输入：grid = [[1],[22],[333]]
输出：[3]
解释：第 0 列中，333 字符串长度为 3 。

示例 2：

输入：grid = [[-15,1,3],[15,7,12],[5,6,-2]]
输出：[3,1,2]
解释：
第 0 列中，只有 -15 字符串长度为 3 。
第 1 列中，所有整数的字符串长度都是 1 。
第 2 列中，12 和 -2 的字符串长度都为 2 。

 

提示：

    m == grid.length
    n == grid[i].length
    1 <= m, n <= 100 
    -109 <= grid[r][c] <= 109


解：
列行遍历求最大,用字符串
95+  
```go
func findColumnWidth(grid [][]int) []int {
	res := make([]int, len(grid[0]))
	for i := 0; i < len(grid[0]); i++ {
		the_max := 1
		for j := 0; j < len(grid); j++ {
			cc := len(strconv.Itoa(grid[j][i]))
			if cc > the_max {
				the_max = cc
			}
		}
		res[i] = the_max
	}
	return res
}
```

---
94. 二叉树的中序遍历

给定一个二叉树的根节点 root ，返回它的 中序 遍历。

 

示例 1：

输入：root = [1,null,2,3]
输出：[1,3,2]

示例 2：

输入：root = []
输出：[]

示例 3：

输入：root = [1]
输出：[1]

示例 4：

输入：root = [1,2]
输出：[2,1]

示例 5：

输入：root = [1,null,2]
输出：[1,2]

 

提示：

    树中节点数目在范围 [0, 100] 内
    -100 <= Node.val <= 100

 

进阶: 递归算法很简单，你可以通过迭代算法完成吗？


解，递归
```py
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        self.res = []
        def f(node):
            if not node:
                return
            f(node.left)
            self.res.append(node.val)
            f(node.right)
        f(root)
        return self.res
```
---


94. 二叉树的中序遍历    --2

给定一个二叉树的根节点 root ，返回它的 中序 遍历。

 

示例 1：

输入：root = [1,null,2,3]
输出：[1,3,2]

示例 2：

输入：root = []
输出：[]

示例 3：

输入：root = [1]
输出：[1]

示例 4：

输入：root = [1,2]
输出：[2,1]

示例 5：

输入：root = [1,null,2]
输出：[1,2]

 

提示：

    树中节点数目在范围 [0, 100] 内
    -100 <= Node.val <= 100

 

进阶: 递归算法很简单，你可以通过迭代算法完成吗？


解，递归
精简代码
```py
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            return []            
        return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)
```
---



94. 二叉树的中序遍历    --3

给定一个二叉树的根节点 root ，返回它的 中序 遍历。

 

示例 1：

输入：root = [1,null,2,3]
输出：[1,3,2]

示例 2：

输入：root = []
输出：[]

示例 3：

输入：root = [1]
输出：[1]

示例 4：

输入：root = [1,2]
输出：[2,1]

示例 5：

输入：root = [1,null,2]
输出：[1,2]

 

提示：

    树中节点数目在范围 [0, 100] 内
    -100 <= Node.val <= 100

 

进阶: 递归算法很简单，你可以通过迭代算法完成吗？


解，递归
100+ 999+
```go
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func inorderTraversal(root *TreeNode) []int {
    res := make([]int, 0)
    f(root, &res)
    return res
}

func f(node *TreeNode, res *[]int){
    if node == nil{
        return
    }
    f(node.Left, res)
    *res = append(*res, node.Val)
    f(node.Right, res)
}
```
---
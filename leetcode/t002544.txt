2544. 交替数字和

给你一个正整数 n 。n 中的每一位数字都会按下述规则分配一个符号：

    最高有效位 上的数字分配到 正 号。
    剩余每位上数字的符号都与其相邻数字相反。

返回所有数字及其对应符号的和。

 

示例 1：

输入：n = 521
输出：4
解释：(+5) + (-2) + (+1) = 4

示例 2：

输入：n = 111
输出：1
解释：(+1) + (-1) + (+1) = 1

示例 3：

输入：n = 886996
输出：0
解释：(+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0

 

提示：

    1 <= n <= 109


解：

使用字符串

```py
class Solution:
    def alternateDigitSum(self, n: int) -> int:
        str_n = str(n)
        res = 0
        sign = -1
        for i in str_n:
            sign = -sign
            res += sign * int(i)
        return res
```

---



2544. 交替数字和    --2

给你一个正整数 n 。n 中的每一位数字都会按下述规则分配一个符号：

    最高有效位 上的数字分配到 正 号。
    剩余每位上数字的符号都与其相邻数字相反。

返回所有数字及其对应符号的和。

 

示例 1：

输入：n = 521
输出：4
解释：(+5) + (-2) + (+1) = 4

示例 2：

输入：n = 111
输出：1
解释：(+1) + (-1) + (+1) = 1

示例 3：

输入：n = 886996
输出：0
解释：(+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0

 

提示：

    1 <= n <= 109


解：

取余 最后看符号

```py
class Solution:
    def alternateDigitSum(self, n: int) -> int:
        res = 0
        sign = 1
        while n > 0:
            res += sign * (n % 10)
            n //= 10
            sign = -sign
        return -sign * res
```

---



2544. 交替数字和    --3

给你一个正整数 n 。n 中的每一位数字都会按下述规则分配一个符号：

    最高有效位 上的数字分配到 正 号。
    剩余每位上数字的符号都与其相邻数字相反。

返回所有数字及其对应符号的和。

 

示例 1：

输入：n = 521
输出：4
解释：(+5) + (-2) + (+1) = 4

示例 2：

输入：n = 111
输出：1
解释：(+1) + (-1) + (+1) = 1

示例 3：

输入：n = 886996
输出：0
解释：(+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0

 

提示：

    1 <= n <= 109


解：

取余 最后看符号
go

```go
func alternateDigitSum(n int) int {
	res := 0
	sign := 1
	for n > 0 {
		res += sign * (n % 10)
		n /= 10
		sign = -sign
	}
	return -sign * res
}
```

---


2544. 交替数字和    --4

给你一个正整数 n 。n 中的每一位数字都会按下述规则分配一个符号：

    最高有效位 上的数字分配到 正 号。
    剩余每位上数字的符号都与其相邻数字相反。

返回所有数字及其对应符号的和。

 

示例 1：

输入：n = 521
输出：4
解释：(+5) + (-2) + (+1) = 4

示例 2：

输入：n = 111
输出：1
解释：(+1) + (-1) + (+1) = 1

示例 3：

输入：n = 886996
输出：0
解释：(+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0

 

提示：

    1 <= n <= 109


解：

取余 最后看符号
dart

```dart
class Solution {
  int alternateDigitSum(int n) {
    int res = 0;
    int sign = 1;
    while (n > 0) {
      res += sign * (n % 10);
      sign *= -1;
      n ~/= 10;
    }
    return -sign * res;
  }
}
```

---


2544. 交替数字和    --5

给你一个正整数 n 。n 中的每一位数字都会按下述规则分配一个符号：

    最高有效位 上的数字分配到 正 号。
    剩余每位上数字的符号都与其相邻数字相反。

返回所有数字及其对应符号的和。

 

示例 1：

输入：n = 521
输出：4
解释：(+5) + (-2) + (+1) = 4

示例 2：

输入：n = 111
输出：1
解释：(+1) + (-1) + (+1) = 1

示例 3：

输入：n = 886996
输出：0
解释：(+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0

 

提示：

    1 <= n <= 109


解：

取余 最后看符号
php

```php
class Solution {

    /**
     * @param Integer $n
     * @return Integer
     */
    function alternateDigitSum($n) {
        $sum = 0;
        $sign = 1;
        while ($n > 0) {
            $sum += $sign * ((int)$n % 10);
            $n = floor((int)$n / 10);
            $sign = -$sign;
        }
        return -$sign * $sum;

    }
}
```

---


2544. 交替数字和    --6

给你一个正整数 n 。n 中的每一位数字都会按下述规则分配一个符号：

    最高有效位 上的数字分配到 正 号。
    剩余每位上数字的符号都与其相邻数字相反。

返回所有数字及其对应符号的和。

 

示例 1：

输入：n = 521
输出：4
解释：(+5) + (-2) + (+1) = 4

示例 2：

输入：n = 111
输出：1
解释：(+1) + (-1) + (+1) = 1

示例 3：

输入：n = 886996
输出：0
解释：(+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0

 

提示：

    1 <= n <= 109


解：

取余 最后看符号
js

```js
/**
 * @param {number} n
 * @return {number}
 */
var alternateDigitSum = function(n) {
    var res = 0;
    var sign = 1;
    while(n > 0) {
        res += sign * (n % 10);
        sign = -sign;
        n = Math.floor(n / 10);
    }
    return -sign * res;
};
```

---
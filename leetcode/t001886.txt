1886. 判断矩阵经轮转后是否一致

给你两个大小为 n x n 的二进制矩阵 mat 和 target 。现 以 90 度顺时针轮转 矩阵 mat 中的元素 若干次 ，如果能够使 mat 与 target 一致，返回 true ；否则，返回 false 。

 

示例 1：

输入：mat = [[0,1],[1,0]], target = [[1,0],[0,1]]
输出：true
解释：顺时针轮转 90 度一次可以使 mat 和 target 一致。

示例 2：

输入：mat = [[0,1],[1,1]], target = [[1,0],[0,1]]
输出：false
解释：无法通过轮转矩阵中的元素使 equal 与 target 一致。

示例 3：

输入：mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]
输出：true
解释：顺时针轮转 90 度两次可以使 mat 和 target 一致。

 

提示：

    n == mat.length == target.length
    n == mat[i].length == target[i].length
    1 <= n <= 10
    mat[i][j] 和 target[i][j] 不是 0 就是 1


解：
边元素依次旋转法

事实上，我们可以对每一圈的每条边上的每个元素单独进行旋转，这样的话，我们只需要临时记录其中的一个元素，以达到空间复杂度为O(1)的实现。

```py
class Solution:
    def findRotation(self, mat: List[List[int]], target: List[List[int]]) -> bool:
        def rotate(matrix):
            n = len(matrix)
            mi = n - 1
            for loop in range(n // 2):
                length = mi - 2 * loop
                for i in range(length):
                    left = matrix[loop + i][loop]
                    matrix[loop + i][loop] = matrix[mi - loop][loop + i]
                    matrix[mi - loop][loop + i] = matrix[mi - loop - i][mi - loop]
                    matrix[mi - loop - i][mi - loop] = matrix[loop][mi - loop - i]
                    matrix[loop][mi - loop - i] = left
        if mat == target:
            return True
        for i in range(3):
            rotate(mat)
            if mat == target:
                return True
        return False
```
---


1886. 判断矩阵经轮转后是否一致    --2

给你两个大小为 n x n 的二进制矩阵 mat 和 target 。现 以 90 度顺时针轮转 矩阵 mat 中的元素 若干次 ，如果能够使 mat 与 target 一致，返回 true ；否则，返回 false 。

 

示例 1：

输入：mat = [[0,1],[1,0]], target = [[1,0],[0,1]]
输出：true
解释：顺时针轮转 90 度一次可以使 mat 和 target 一致。

示例 2：

输入：mat = [[0,1],[1,1]], target = [[1,0],[0,1]]
输出：false
解释：无法通过轮转矩阵中的元素使 equal 与 target 一致。

示例 3：

输入：mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]
输出：true
解释：顺时针轮转 90 度两次可以使 mat 和 target 一致。

 

提示：

    n == mat.length == target.length
    n == mat[i].length == target[i].length
    1 <= n <= 10
    mat[i][j] 和 target[i][j] 不是 0 就是 1


解：
使用numpy

```py
import numpy as np

class Solution:
    def findRotation(self, mat: List[List[int]], target: List[List[int]]) -> bool:
        if mat == target:
            return True
        mat2 = np.array(mat)
        mat_target = np.array(target)
        for i in range(1, 4):
            mat3 = np.rot90(mat2, i, (1, 0))
            if (mat_target == mat3).all():
                return True
        return False
```
---



1886. 判断矩阵经轮转后是否一致    --3

给你两个大小为 n x n 的二进制矩阵 mat 和 target 。现 以 90 度顺时针轮转 矩阵 mat 中的元素 若干次 ，如果能够使 mat 与 target 一致，返回 true ；否则，返回 false 。

 

示例 1：

输入：mat = [[0,1],[1,0]], target = [[1,0],[0,1]]
输出：true
解释：顺时针轮转 90 度一次可以使 mat 和 target 一致。

示例 2：

输入：mat = [[0,1],[1,1]], target = [[1,0],[0,1]]
输出：false
解释：无法通过轮转矩阵中的元素使 equal 与 target 一致。

示例 3：

输入：mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]
输出：true
解释：顺时针轮转 90 度两次可以使 mat 和 target 一致。

 

提示：

    n == mat.length == target.length
    n == mat[i].length == target[i].length
    1 <= n <= 10
    mat[i][j] 和 target[i][j] 不是 0 就是 1


解：
go语言，100+
go语言需要自己写比较

```py
func findRotation(mat [][]int, target [][]int) bool {
     if sliceEqualBCE(mat, target){
         return true
     }
     for i := 0; i < 3; i++{
         rotate(mat)
         if sliceEqualBCE(mat, target){
             return true
         }
     }
     return false
}

func rotate(matrix [][]int){
    n := len(matrix)
    mi := n - 1
    for loop := 0; loop < (n / 2); loop++{
        length := mi - 2 * loop
        for i := 0; i < length; i++{
            left := matrix[loop + i][loop]
            matrix[loop + i][loop] = matrix[mi - loop][loop + i]
            matrix[mi - loop][loop + i] = matrix[mi - loop - i][mi - loop]
            matrix[mi - loop - i][mi - loop] = matrix[loop][mi - loop - i]
            matrix[loop][mi - loop - i] = left
        }
    }
}

func sliceEqualBCE(a, b [][]int) bool {
    if len(a) != len(b) {
        return false
    }

    if (a == nil) != (b == nil) {
        return false
    }
    for i := 0; i < len(a); i++{
        for k:=0;k<len(a[0]);k++{
            if a[i][k] != b[i][k]{
                return false
            }
        }
    }
    return true
}
```
---
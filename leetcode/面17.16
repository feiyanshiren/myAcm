面试题 17.16. 按摩师
一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。

注意：本题相对原题稍作改动

 

示例 1：

输入： [1,2,3,1]
输出： 4
解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。
示例 2：

输入： [2,7,9,3,1]
输出： 12
解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。
示例 3：

输入： [2,1,4,5,3,1,1,3]
输出： 12
解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。

解：
暴力递归，超时，但是应该是对的

```py
class Solution:
    def massage(self, nums: List[int]) -> int: 

        def f(ns):
            l = len(ns)
            if l == 0:
                return 0
            elif l == 1:
                return ns[0]
            elif l == 2:
                return max(ns)
            else:
                a1 = f([ns[0]]) + f(ns[2:])
                a2 = f([ns[1]]) + f(ns[3:])
                return max(a1, a2)
        
        return f(nums)
```
---


面试题 17.16. 按摩师    --2
一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。

注意：本题相对原题稍作改动

 

示例 1：

输入： [1,2,3,1]
输出： 4
解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。
示例 2：

输入： [2,7,9,3,1]
输出： 12
解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。
示例 3：

输入： [2,1,4,5,3,1,1,3]
输出： 12
解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。

解：
暴力递归，+打表，使用库打表，使用json转字符串好hash

```py
from functools import lru_cache
import json

class Solution:
    def massage(self, nums: List[int]) -> int:
        @lru_cache(None)
        def f(ns):
            ss = json.loads(ns)
            l = len(ss)
            if l == 0:
                return 0
            elif l <= 2:
                return max(ss)
            else:
                a1 = ss[0] + f(json.dumps(ss[2:]))
                a2 = ss[1] + f(json.dumps(ss[3:]))
                return max(a1, a2)


        return f(json.dumps(nums))
```
---


面试题 17.16. 按摩师    --3
一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。

注意：本题相对原题稍作改动

 

示例 1：

输入： [1,2,3,1]
输出： 4
解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。
示例 2：

输入： [2,7,9,3,1]
输出： 12
解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。
示例 3：

输入： [2,1,4,5,3,1,1,3]
输出： 12
解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。

解：
dp 递推方程
DP思想，状态转移方程为：f(n)=max( f(n-2)+nums[n], f(n-1) )，初始条件为：f(-1)=0，f(0)=0。

f(n)指根据题意可求得的数组前n项的最大值。

```py
class Solution:
    def massage(self, nums: List[int]) -> int:
        a,b=0,0
        for n in nums:
            b,a=max(a+n,b),b
        return b
```
---

2085. 统计出现过一次的公共字符串
给你两个字符串数组 words1 和 words2 ，请你返回在两个字符串数组中 都恰好出现一次 的字符串的数目。

 

示例 1：

输入：words1 = ["leetcode","is","amazing","as","is"], words2 = ["amazing","leetcode","is"]
输出：2
解释：
- "leetcode" 在两个数组中都恰好出现一次，计入答案。
- "amazing" 在两个数组中都恰好出现一次，计入答案。
- "is" 在两个数组中都出现过，但在 words1 中出现了 2 次，不计入答案。
- "as" 在 words1 中出现了一次，但是在 words2 中没有出现过，不计入答案。
所以，有 2 个字符串在两个数组中都恰好出现了一次。
示例 2：

输入：words1 = ["b","bb","bbb"], words2 = ["a","aa","aaa"]
输出：0
解释：没有字符串在两个数组中都恰好出现一次。
示例 3：

输入：words1 = ["a","ab"], words2 = ["a","a","a","ab"]
输出：1
解释：唯一在两个数组中都出现一次的字符串是 "ab" 。
 

提示：

1 <= words1.length, words2.length <= 1000
1 <= words1[i].length, words2[j].length <= 30
words1[i] 和 words2[j] 都只包含小写英文字母。

解：
使用两个字典

```py
class Solution:
    def countWords(self, words1: List[str], words2: List[str]) -> int:
        w1 = [k for k, v in dict(collections.Counter(words1)).items() if v == 1]
        w2 = [k for k, v in dict(collections.Counter(words2)).items() if v == 1]
        res = 0
        for v in w1:
            if v in w2:
                res += 1
        return res

```
---


2085. 统计出现过一次的公共字符串    --2
给你两个字符串数组 words1 和 words2 ，请你返回在两个字符串数组中 都恰好出现一次 的字符串的数目。

 

示例 1：

输入：words1 = ["leetcode","is","amazing","as","is"], words2 = ["amazing","leetcode","is"]
输出：2
解释：
- "leetcode" 在两个数组中都恰好出现一次，计入答案。
- "amazing" 在两个数组中都恰好出现一次，计入答案。
- "is" 在两个数组中都出现过，但在 words1 中出现了 2 次，不计入答案。
- "as" 在 words1 中出现了一次，但是在 words2 中没有出现过，不计入答案。
所以，有 2 个字符串在两个数组中都恰好出现了一次。
示例 2：

输入：words1 = ["b","bb","bbb"], words2 = ["a","aa","aaa"]
输出：0
解释：没有字符串在两个数组中都恰好出现一次。
示例 3：

输入：words1 = ["a","ab"], words2 = ["a","a","a","ab"]
输出：1
解释：唯一在两个数组中都出现一次的字符串是 "ab" 。
 

提示：

1 <= words1.length, words2.length <= 1000
1 <= words1[i].length, words2[j].length <= 30
words1[i] 和 words2[j] 都只包含小写英文字母。

解：
精简代码

```py
class Solution:
    def countWords(self, words1: List[str], words2: List[str]) -> int:
        w1 = [k for k, v in dict(collections.Counter(words1)).items() if v == 1]
        w2 = [k for k, v in dict(collections.Counter(words2)).items() if v == 1]
        return len([v for v in w1 if v in w2])
```
---



2085. 统计出现过一次的公共字符串    --3
给你两个字符串数组 words1 和 words2 ，请你返回在两个字符串数组中 都恰好出现一次 的字符串的数目。

 

示例 1：

输入：words1 = ["leetcode","is","amazing","as","is"], words2 = ["amazing","leetcode","is"]
输出：2
解释：
- "leetcode" 在两个数组中都恰好出现一次，计入答案。
- "amazing" 在两个数组中都恰好出现一次，计入答案。
- "is" 在两个数组中都出现过，但在 words1 中出现了 2 次，不计入答案。
- "as" 在 words1 中出现了一次，但是在 words2 中没有出现过，不计入答案。
所以，有 2 个字符串在两个数组中都恰好出现了一次。
示例 2：

输入：words1 = ["b","bb","bbb"], words2 = ["a","aa","aaa"]
输出：0
解释：没有字符串在两个数组中都恰好出现一次。
示例 3：

输入：words1 = ["a","ab"], words2 = ["a","a","a","ab"]
输出：1
解释：唯一在两个数组中都出现一次的字符串是 "ab" 。
 

提示：

1 <= words1.length, words2.length <= 1000
1 <= words1[i].length, words2[j].length <= 30
words1[i] 和 words2[j] 都只包含小写英文字母。

解：
c++

```cpp
class Solution {
public:
    int countWords(vector<string>& words1, vector<string>& words2) {
        map<string, int> w1;
        map<string, int> w2;
        for (int i = 0; i < words1.size(); i++){
            if (w1.find(words1[i]) != w1.end()){
                w1[words1[i]] += 1;
            }else{
                w1[words1[i]] = 1;
            }
        }
        for (int i = 0; i < words2.size(); i++){
            if (w2.find(words2[i]) != w2.end()){
                w2[words2[i]] += 1;
            }else{
                w2[words2[i]] = 1;
            }
        }
        int res = 0;
        map < string ,int > ::iterator it;
        map < string ,int > ::iterator itEnd;
        it = w1.begin();
        itEnd = w1.end();
        while (it != itEnd) {
            if (it->second == 1 && w2[it->first] == 1){
                res += 1;
            }
            it++;
        }
        return res;
    }
};
```
---



2085. 统计出现过一次的公共字符串    --4
给你两个字符串数组 words1 和 words2 ，请你返回在两个字符串数组中 都恰好出现一次 的字符串的数目。

 

示例 1：

输入：words1 = ["leetcode","is","amazing","as","is"], words2 = ["amazing","leetcode","is"]
输出：2
解释：
- "leetcode" 在两个数组中都恰好出现一次，计入答案。
- "amazing" 在两个数组中都恰好出现一次，计入答案。
- "is" 在两个数组中都出现过，但在 words1 中出现了 2 次，不计入答案。
- "as" 在 words1 中出现了一次，但是在 words2 中没有出现过，不计入答案。
所以，有 2 个字符串在两个数组中都恰好出现了一次。
示例 2：

输入：words1 = ["b","bb","bbb"], words2 = ["a","aa","aaa"]
输出：0
解释：没有字符串在两个数组中都恰好出现一次。
示例 3：

输入：words1 = ["a","ab"], words2 = ["a","a","a","ab"]
输出：1
解释：唯一在两个数组中都出现一次的字符串是 "ab" 。
 

提示：

1 <= words1.length, words2.length <= 1000
1 <= words1[i].length, words2[j].length <= 30
words1[i] 和 words2[j] 都只包含小写英文字母。

解：
c++ 精简

```cpp
class Solution {
public:
    int countWords(vector<string>& words1, vector<string>& words2) {
        map<string, int> w1, w2;
        for (auto& v: words1){
            w1[v] += 1;
        }
        for (auto& v: words2){
            w2[v] += 1;
        }
        int res = 0;
        for (auto& v: w1){
            if (v.second == 1 && w2[v.first] == 1){
                res += 1;
            }
        }
        return res;
    }
};
```
---


2085. 统计出现过一次的公共字符串    --5
给你两个字符串数组 words1 和 words2 ，请你返回在两个字符串数组中 都恰好出现一次 的字符串的数目。

 

示例 1：

输入：words1 = ["leetcode","is","amazing","as","is"], words2 = ["amazing","leetcode","is"]
输出：2
解释：
- "leetcode" 在两个数组中都恰好出现一次，计入答案。
- "amazing" 在两个数组中都恰好出现一次，计入答案。
- "is" 在两个数组中都出现过，但在 words1 中出现了 2 次，不计入答案。
- "as" 在 words1 中出现了一次，但是在 words2 中没有出现过，不计入答案。
所以，有 2 个字符串在两个数组中都恰好出现了一次。
示例 2：

输入：words1 = ["b","bb","bbb"], words2 = ["a","aa","aaa"]
输出：0
解释：没有字符串在两个数组中都恰好出现一次。
示例 3：

输入：words1 = ["a","ab"], words2 = ["a","a","a","ab"]
输出：1
解释：唯一在两个数组中都出现一次的字符串是 "ab" 。
 

提示：

1 <= words1.length, words2.length <= 1000
1 <= words1[i].length, words2[j].length <= 30
words1[i] 和 words2[j] 都只包含小写英文字母。

解：
java

```java
class Solution {
    public int countWords(String[] words1, String[] words2) {
        Map<String, Integer> w1 = new HashMap<>();
        Map<String, Integer> w2 = new HashMap<>();
        for (int i = 0; i < words1.length; i++){
            w1.put(words1[i], w1.getOrDefault(words1[i], 0) + 1);
        }
        for (int i = 0; i < words2.length; i++){
            w2.put(words2[i], w2.getOrDefault(words2[i], 0) + 1);
        }
        int res = 0;
        for (String k : w1.keySet()) {
            if (w1.get(k) == 1 && w2.getOrDefault(k, 0) == 1){
                res += 1;
            }
        }
        return res;
    }
}
```
---


2085. 统计出现过一次的公共字符串    --6
给你两个字符串数组 words1 和 words2 ，请你返回在两个字符串数组中 都恰好出现一次 的字符串的数目。

 

示例 1：

输入：words1 = ["leetcode","is","amazing","as","is"], words2 = ["amazing","leetcode","is"]
输出：2
解释：
- "leetcode" 在两个数组中都恰好出现一次，计入答案。
- "amazing" 在两个数组中都恰好出现一次，计入答案。
- "is" 在两个数组中都出现过，但在 words1 中出现了 2 次，不计入答案。
- "as" 在 words1 中出现了一次，但是在 words2 中没有出现过，不计入答案。
所以，有 2 个字符串在两个数组中都恰好出现了一次。
示例 2：

输入：words1 = ["b","bb","bbb"], words2 = ["a","aa","aaa"]
输出：0
解释：没有字符串在两个数组中都恰好出现一次。
示例 3：

输入：words1 = ["a","ab"], words2 = ["a","a","a","ab"]
输出：1
解释：唯一在两个数组中都出现一次的字符串是 "ab" 。
 

提示：

1 <= words1.length, words2.length <= 1000
1 <= words1[i].length, words2[j].length <= 30
words1[i] 和 words2[j] 都只包含小写英文字母。

解：
javascript
82+

js map

```js
/**
 * @param {string[]} words1
 * @param {string[]} words2
 * @return {number}
 */
var countWords = function(words1, words2) {
    w1 = new Map();
    w2 = new Map();
    for (v of words1){
        w1.set(v, (w1.get(v) || 0) + 1);
    }
    for (v of words2){
        w2.set(v, (w2.get(v) || 0) + 1);
    }
    res = 0;
    for ([k, v] of w1){
        if (v == 1 && (w2.get(k) || 0) == 1){
            res += 1;
        }
    }
    return res;
};
```
---



2085. 统计出现过一次的公共字符串    --7
给你两个字符串数组 words1 和 words2 ，请你返回在两个字符串数组中 都恰好出现一次 的字符串的数目。

 

示例 1：

输入：words1 = ["leetcode","is","amazing","as","is"], words2 = ["amazing","leetcode","is"]
输出：2
解释：
- "leetcode" 在两个数组中都恰好出现一次，计入答案。
- "amazing" 在两个数组中都恰好出现一次，计入答案。
- "is" 在两个数组中都出现过，但在 words1 中出现了 2 次，不计入答案。
- "as" 在 words1 中出现了一次，但是在 words2 中没有出现过，不计入答案。
所以，有 2 个字符串在两个数组中都恰好出现了一次。
示例 2：

输入：words1 = ["b","bb","bbb"], words2 = ["a","aa","aaa"]
输出：0
解释：没有字符串在两个数组中都恰好出现一次。
示例 3：

输入：words1 = ["a","ab"], words2 = ["a","a","a","ab"]
输出：1
解释：唯一在两个数组中都出现一次的字符串是 "ab" 。
 

提示：

1 <= words1.length, words2.length <= 1000
1 <= words1[i].length, words2[j].length <= 30
words1[i] 和 words2[j] 都只包含小写英文字母。

解：
go
83+

go map

```go
func countWords(words1 []string, words2 []string) int {
    w1 := make(map[string]int)
    w2 := make(map[string]int)
    for _, v := range words1{
        if _, ok := w1[v]; !ok {
            w1[v] = 1
        }else{
            w1[v] += 1
        }
    }
    for _, v := range words2{
        if _, ok := w2[v]; !ok {
            w2[v] = 1
        }else{
            w2[v] += 1
        }
    }
    res := 0
    for k, v := range w1{
        if v == 1{
            if _, ok:= w2[k]; ok{
                if w2[k] == 1{
                    res += 1
                }
            }
        }
    }
    return res
}
```
---
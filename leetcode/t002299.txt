2299. 强密码检验器 II
如果一个密码满足以下所有条件，我们称它是一个 强 密码：

它有至少 8 个字符。
至少包含 一个小写英文 字母。
至少包含 一个大写英文 字母。
至少包含 一个数字 。
至少包含 一个特殊字符 。特殊字符为："!@#$%^&*()-+" 中的一个。
它 不 包含 2 个连续相同的字符（比方说 "aab" 不符合该条件，但是 "aba" 符合该条件）。
给你一个字符串 password ，如果它是一个 强 密码，返回 true，否则返回 false 。

 

示例 1：

输入：password = "IloveLe3tcode!"
输出：true
解释：密码满足所有的要求，所以我们返回 true 。
示例 2：

输入：password = "Me+You--IsMyDream"
输出：false
解释：密码不包含数字，且包含 2 个连续相同的字符。所以我们返回 false 。
示例 3：

输入：password = "1aB!"
输出：false
解释：密码不符合长度要求。所以我们返回 false 。
 

提示：

1 <= password.length <= 100
password 包含字母，数字和 "!@#$%^&*()-+" 这些特殊字符。


解：
按题意来

```py
class Solution:
    def strongPasswordCheckerII(self, password: str) -> bool:
        ll = len(password)
        if ll < 8:
            return False
        lower_case = False
        upper_case = False
        for i in password:
            if i.isalpha():
                if 'a' <= i <= 'z':
                    lower_case = True
                if 'A' <= i <= 'Z':
                    upper_case = True
        if not any(chr.isdigit() for chr in password):
            return False
        if not any(i in "!@#$%^&*()-+" for i in password):
            return False
        for i in range(ll -1):
            if password[i] == password[i + 1]:
                return False
        return upper_case and lower_case
```

---



2299. 强密码检验器 II    --2
如果一个密码满足以下所有条件，我们称它是一个 强 密码：

它有至少 8 个字符。
至少包含 一个小写英文 字母。
至少包含 一个大写英文 字母。
至少包含 一个数字 。
至少包含 一个特殊字符 。特殊字符为："!@#$%^&*()-+" 中的一个。
它 不 包含 2 个连续相同的字符（比方说 "aab" 不符合该条件，但是 "aba" 符合该条件）。
给你一个字符串 password ，如果它是一个 强 密码，返回 true，否则返回 false 。

 

示例 1：

输入：password = "IloveLe3tcode!"
输出：true
解释：密码满足所有的要求，所以我们返回 true 。
示例 2：

输入：password = "Me+You--IsMyDream"
输出：false
解释：密码不包含数字，且包含 2 个连续相同的字符。所以我们返回 false 。
示例 3：

输入：password = "1aB!"
输出：false
解释：密码不符合长度要求。所以我们返回 false 。
 

提示：

1 <= password.length <= 100
password 包含字母，数字和 "!@#$%^&*()-+" 这些特殊字符。


解：
正则

```py
class Solution:
    def strongPasswordCheckerII(self, password: str) -> bool:
        if len(password) < 8: return False
        for i in range(1, len(password)):
            if password[i] == password[i - 1]:
                return False
        pattern1 = re.search(r"\d",password)     # <re.Match object; span=(7, 8), match='3'>
        pattern2 = re.search(r"[a-z]",password)  # <re.Match object; span=(1, 2), match='l'>
        pattern3 = re.search(r"[A-Z]",password)  # <re.Match object; span=(0, 1), match='I'>
        pattern4 = re.search(r"\W",password)     # <re.Match object; span=(13, 14), match='!'>
        # print(pattern2)
        if pattern1 and pattern2 and pattern3 and pattern4:
            return True
        else:
            return False


```

---
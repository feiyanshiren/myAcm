1796. 字符串中第二大的数字

给你一个混合字符串 s ，请你返回 s 中 第二大 的数字，如果不存在第二大的数字，请你返回 -1 。

混合字符串 由小写英文字母和数字组成。

 

示例 1：

输入：s = "dfa12321afd"
输出：2
解释：出现在 s 中的数字包括 [1, 2, 3] 。第二大的数字是 2 。

示例 2：

输入：s = "abc1111"
输出：-1
解释：出现在 s 中的数字只包含 [1] 。没有第二大的数字。

 

提示：

    1 <= s.length <= 500
    s 只包含小写英文字母和（或）数字。


解：
使用一次循环，然后使用两个变量标记，注意不需要等于的情况和第二大的标记 

```py
class Solution: def secondHighest(self, s: str) -> int:
        max1 = -1
        max2 = -1
        for i in s:
            if i.isdigit():
                ii = int(i)
                if ii > max1:
                    max2 = max1
                    max1 = ii
                elif ii < max1 and ii > max2:
                    max2 = ii
        return max2
``` 
---



1796. 字符串中第二大的数字    --2

给你一个混合字符串 s ，请你返回 s 中 第二大 的数字，如果不存在第二大的数字，请你返回 -1 。

混合字符串 由小写英文字母和数字组成。

 

示例 1：

输入：s = "dfa12321afd"
输出：2
解释：出现在 s 中的数字包括 [1, 2, 3] 。第二大的数字是 2 。

示例 2：

输入：s = "abc1111"
输出：-1
解释：出现在 s 中的数字只包含 [1] 。没有第二大的数字。

 

提示：

    1 <= s.length <= 500
    s 只包含小写英文字母和（或）数字。


解：
使用set重和字符后排序88+

```py
class Solution:
    def secondHighest(self, s: str) -> int:
        s1 = sorted(list({int(i) for i in s if i.isdigit()}))
        return -1 if len(s1) <= 1 else s1[-2]
``` 
---

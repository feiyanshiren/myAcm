面试题 08.01. 三步问题
三步问题。有个小孩正在上楼梯，楼梯有n阶台阶，小孩一次可以上1阶、2阶或3阶。实现一种方法，计算小孩有多少种上楼梯的方式。结果可能很大，你需要对结果模1000000007。

示例1:

 输入：n = 3 
 输出：4
 说明: 有四种走法
示例2:

 输入：n = 5
 输出：13
提示:

n范围在[1, 1000000]之间
通过次数12,252提交次数35,264

解：和青蛙跳差不多

```py
class Solution:
    def waysToStep(self, n: int) -> int:
        if n < 3:
            return n
        elif n == 3:
            return 4
        else:
            a = 1
            b = 2
            c = 4
            d = 0
            while n >= 4:
                d = ((a + b) % 1000000007 + c) % 1000000007
                a = b
                b = c
                c = d
                n -= 1
        return d
```
---


面试题 08.01. 三步问题    --2
三步问题。有个小孩正在上楼梯，楼梯有n阶台阶，小孩一次可以上1阶、2阶或3阶。实现一种方法，计算小孩有多少种上楼梯的方式。结果可能很大，你需要对结果模1000000007。

示例1:

 输入：n = 3 
 输出：4
 说明: 有四种走法
示例2:

 输入：n = 5
 输出：13
提示:

n范围在[1, 1000000]之间
通过次数12,252提交次数35,264

解：go语言版

```go
func waysToStep(n int) int {
    if n < 3{
        return n
    }else if n == 3{
        return 4
    }else{
        a := 1
        b := 2
        c := 4
        d := 0
        for n >= 4 {
            d = ((a + b) % 1000000007 + c) % 1000000007
            a = b
            b = c
            c = d
            n -= 1
        }
        return d
    }
}
```
---

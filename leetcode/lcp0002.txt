LCP 02. 分式化简

有一个同学在学习分式。他需要将一个连分数化成最简分数，你能帮助他吗？

连分数是形如上图的分式。在本题中，所有系数都是大于等于0的整数。

 

输入的cont代表连分数的系数（cont[0]代表上图的a0，以此类推）。返回一个长度为2的数组[n, m]，使得连分数的值等于n / m，且n, m最大公约数为1。

 

示例 1：

输入：cont = [3, 2, 0, 2]
输出：[13, 4]
解释：原连分数等价于3 + (1 / (2 + (1 / (0 + 1 / 2))))。注意[26, 8], [-13, -4]都不是正确答案。

示例 2：

输入：cont = [0, 0, 3]
输出：[3, 1]
解释：如果答案是整数，令分母为1即可。

 

限制：

    cont[i] >= 0
    1 <= cont的长度 <= 10
    cont最后一个元素不等于0
    答案的n, m的取值都能被32位int整型存下（即不超过2 ^ 31 - 1）。

解：
递归，使用一个2长度的数组表示分子分母  93+

```py
class Solution:
    def fraction(self, cont: List[int]) -> List[int]:
        a = [[i, 1] for i in cont]
        return self.f(a)

    def f(self, cont):
        if len(cont) == 1:
            return cont[0]
        else:
            c2 = cont[-1][::-1]
            a = [cont[-2][0] * c2[1] + c2[0], c2[1]]
            b = cont[:-2]
            b.append(a)
            return self.f(b)
```
---


LCP 02. 分式化简    --2

有一个同学在学习分式。他需要将一个连分数化成最简分数，你能帮助他吗？

连分数是形如上图的分式。在本题中，所有系数都是大于等于0的整数。

 

输入的cont代表连分数的系数（cont[0]代表上图的a0，以此类推）。返回一个长度为2的数组[n, m]，使得连分数的值等于n / m，且n, m最大公约数为1。

 

示例 1：

输入：cont = [3, 2, 0, 2]
输出：[13, 4]
解释：原连分数等价于3 + (1 / (2 + (1 / (0 + 1 / 2))))。注意[26, 8], [-13, -4]都不是正确答案。

示例 2：

输入：cont = [0, 0, 3]
输出：[3, 1]
解释：如果答案是整数，令分母为1即可。

 

限制：

    cont[i] >= 0
    1 <= cont的长度 <= 10
    cont最后一个元素不等于0
    答案的n, m的取值都能被32位int整型存下（即不超过2 ^ 31 - 1）。

解：
递归，使用一个2长度的数组表示分子分母 go语言注意切片的初始化 100+

```go
func fraction(cont []int) []int {
    a := make([][]int, 0)
    for i := 0; i < len(cont); i++{
        b := []int{cont[i], 1}
        a = append(a, b)
    }
    return f(a)
}

func f(cont [][]int) []int{
    if len(cont) == 1{
        return cont[0]
    }else{
        l := len(cont)
        c2 := []int{cont[l - 1][1], cont[l - 1][0]}
        a := []int{cont[l - 2][0] * c2[1] + c2[0], c2[1]}
        b := make([][]int, 0)
        for i := 0; i < l - 2; i++{
            b = append(b, cont[i])
        }
        b = append(b, a)
        return f(b)
    }
}
```
---
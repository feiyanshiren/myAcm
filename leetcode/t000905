905. 按奇偶排序数组

给定一个非负整数数组 A，返回一个数组，在该数组中， A 的所有偶数元素之后跟着所有奇数元素。

你可以返回满足此条件的任何数组作为答案。



示例：

输入：[3,1,2,4]
输出：[2,4,3,1]
输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。



提示：

    1 <= A.length <= 5000
    0 <= A[i] <= 5000

解：
循环遍历分两个数组


```py


class Solution:
    def sortArrayByParity(self, A: List[int]) -> List[int]:
        a1 = []
        a2 = []
        for i in A:
            if i % 2 == 0:
                a1.append(i)
            else:
                a2.append(i)
        return a1 + a2



```
---


905. 按奇偶排序数组    --2

给定一个非负整数数组 A，返回一个数组，在该数组中， A 的所有偶数元素之后跟着所有奇数元素。

你可以返回满足此条件的任何数组作为答案。



示例：

输入：[3,1,2,4]
输出：[2,4,3,1]
输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。



提示：

    1 <= A.length <= 5000
    0 <= A[i] <= 5000

解：
用原来的数组，不增加空间，但是慢，因为循环里操作过多


```py


class Solution:
    def sortArrayByParity(self, A: List[int]) -> List[int]:
        l = len(A)
        i = 0
        while i < l:
            if A[i] % 2 == 0:
                A.insert(0, A.pop(i))
                i += 1
            else:
                A.append(A.pop(i))
                l -= 1
        return A



```
---


905. 按奇偶排序数组    --3

给定一个非负整数数组 A，返回一个数组，在该数组中， A 的所有偶数元素之后跟着所有奇数元素。

你可以返回满足此条件的任何数组作为答案。



示例：

输入：[3,1,2,4]
输出：[2,4,3,1]
输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。



提示：

    1 <= A.length <= 5000
    0 <= A[i] <= 5000

解：
使用偶数排序


```py

class Solution(object):
    def sortArrayByParity(self, A):
        A.sort(key = lambda x: x % 2)
        return A


```
---
977. 有序数组的平方

给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。

 

示例 1：

输入：[-4,-1,0,3,10]
输出：[0,1,9,16,100]

示例 2：

输入：[-7,-3,2,3,11]
输出：[4,9,9,49,121]

 

提示：

    1 <= A.length <= 10000
    -10000 <= A[i] <= 10000
    A 已按非递减顺序排序。

解：
先求平方再排序

```py
class Solution:
    def sortedSquares(self, A: List[int]) -> List[int]:
        A = [i ** 2 for i in A]
        A.sort()
        return A
```

---


977. 有序数组的平方    --2

给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。

 

示例 1：

输入：[-4,-1,0,3,10]
输出：[0,1,9,16,100]

示例 2：

输入：[-7,-3,2,3,11]
输出：[4,9,9,49,121]

 

提示：

    1 <= A.length <= 10000
    -10000 <= A[i] <= 10000
    A 已按非递减顺序排序。


解：
双指针，
注意，不要两个指针同时增减

```py
class Solution:
    def sortedSquares(self, A: List[int]) -> List[int]:
        l = 0
        r = len(A) - 1
        b = []
        while l <= r:
            a1 = A[l] ** 2
            a2 = A[r] ** 2
            if a1 > a2:
                b.insert(0, a1)
                l += 1
            else:
                b.insert(0, a2)
                r -= 1
        return b
```

---

977. 有序数组的平方   --3
给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。

 

示例 1：

输入：[-4,-1,0,3,10]
输出：[0,1,9,16,100]
示例 2：

输入：[-7,-3,2,3,11]
输出：[4,9,9,49,121]
 

提示：

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A 已按非递减顺序排序。


解：
使用map 一行 99+
```py
class Solution:
    def sortedSquares(self, A: List[int]) -> List[int]:
        return sorted(map(lambda x: x **2, A))
```
---
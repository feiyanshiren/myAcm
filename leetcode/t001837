1837. K 进制表示下的各位数字总和

给你一个整数 n（10 进制）和一个基数 k ，请你将 n 从 10 进制表示转换为 k 进制表示，计算并返回转换后各位数字的 总和 。

转换后，各位数字应当视作是 10 进制数字，且它们的总和也应当按 10 进制表示返回。

 

示例 1：

输入：n = 34, k = 6
输出：9
解释：34 (10 进制) 在 6 进制下表示为 54 。5 + 4 = 9 。

示例 2：

输入：n = 10, k = 10
输出：1
解释：n 本身就是 10 进制。 1 + 0 = 1 。

 

提示：

    1 <= n <= 100
    2 <= k <= 10

解：
完全根据提议来，估计会超时

```py
class Solution:
    def sumBase(self, n: int, k: int) -> int:
        if k == 10:
            return sum([int(i) for i in str(n)])
        elif k == 2:
            return sum([int(i) for i in bin(n)])
        elif k == 8:
            return sum([int(i) for i in ord(n)])
        elif k == 16:
            return sum([int(i, 16) for i in hex(n)])
        else:
            def f(n, x):
                a=['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']
                b=[]
                while True:
                    s = n // x
                    y = n % x
                    b = b + [y]
                    if s == 0:
                        break
                    n = s
                b.reverse()
                res = ""
                for i in b:
                    res += a[i]
                return res
            return sum([int(i, 16) for i in f(n, k)])
```
---

1837. K 进制表示下的各位数字总和    --2

给你一个整数 n（10 进制）和一个基数 k ，请你将 n 从 10 进制表示转换为 k 进制表示，计算并返回转换后各位数字的 总和 。

转换后，各位数字应当视作是 10 进制数字，且它们的总和也应当按 10 进制表示返回。

 

示例 1：

输入：n = 34, k = 6
输出：9
解释：34 (10 进制) 在 6 进制下表示为 54 。5 + 4 = 9 。

示例 2：

输入：n = 10, k = 10
输出：1
解释：n 本身就是 10 进制。 1 + 0 = 1 。

 

提示：

    1 <= n <= 100
    2 <= k <= 10

解：
其实在求余数的时候就可以累加计算了

```py
class Solution:
    def sumBase(self, n: int, k: int) -> int:
        res = 0
        while n:
            res += n % k
            n //= k
        return res
```
---


1837. K 进制表示下的各位数字总和    --3

给你一个整数 n（10 进制）和一个基数 k ，请你将 n 从 10 进制表示转换为 k 进制表示，计算并返回转换后各位数字的 总和 。

转换后，各位数字应当视作是 10 进制数字，且它们的总和也应当按 10 进制表示返回。

 

示例 1：

输入：n = 34, k = 6
输出：9
解释：34 (10 进制) 在 6 进制下表示为 54 。5 + 4 = 9 。

示例 2：

输入：n = 10, k = 10
输出：1
解释：n 本身就是 10 进制。 1 + 0 = 1 。

 

提示：

    1 <= n <= 100
    2 <= k <= 10

解：
其实在求余数的时候就可以累加计算了,go语言 100+

```py
func sumBase(n int, k int) int {
    res := 0
    for n > 0{
        res += n % k
        n /= k
    }
    return res
}
```
---
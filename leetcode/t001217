1217. 玩筹码

数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。

你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：

    将第 i 个筹码向左或者右移动 2 个单位，代价为 0。
    将第 i 个筹码向左或者右移动 1 个单位，代价为 1。

最开始的时候，同一位置上也可能放着两个或者更多的筹码。

返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。

 

示例 1：

输入：chips = [1,2,3]
输出：1
解释：第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。

示例 2：

输入：chips = [2,2,2,3,3]
输出：2
解释：第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。

 

提示：

    1 <= chips.length <= 100
    1 <= chips[i] <= 10^9


解：
原来就是对2取余，数出0和1的个数，取数量较少的的那一个就行了 82+

```py
class Solution:
    def minCostToMoveChips(self, position: List[int]) -> int:
        j = 0
        o = 0
        for i in position:
            if i % 2 != 0:
                j += 1
            else:
                o += 1
        return min(j , o)
```
---


1217. 玩筹码    --2

数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。

你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：

    将第 i 个筹码向左或者右移动 2 个单位，代价为 0。
    将第 i 个筹码向左或者右移动 1 个单位，代价为 1。

最开始的时候，同一位置上也可能放着两个或者更多的筹码。

返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。

 

示例 1：

输入：chips = [1,2,3]
输出：1
解释：第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。

示例 2：

输入：chips = [2,2,2,3,3]
输出：2
解释：第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。

 

提示：

    1 <= chips.length <= 100
    1 <= chips[i] <= 10^9

解：
一行
```py
class Solution:
    def minCostToMoveChips(self, chips: List[int]) -> int:
        return min(sum(1 for i in chips if i%2==1),sum(1 for i in chips if i%2==0))
```
---

2239. 找到最接近 0 的数字
给你一个长度为 n 的整数数组 nums ，请你返回 nums 中最 接近 0 的数字。如果有多个答案，请你返回它们中的 最大值 。

 

示例 1：

输入：nums = [-4,-2,1,4,8]
输出：1
解释：
-4 到 0 的距离为 |-4| = 4 。
-2 到 0 的距离为 |-2| = 2 。
1 到 0 的距离为 |1| = 1 。
4 到 0 的距离为 |4| = 4 。
8 到 0 的距离为 |8| = 8 。
所以，数组中距离 0 最近的数字为 1 。
示例 2：

输入：nums = [2,-1,1]
输出：1
解释：1 和 -1 都是距离 0 最近的数字，所以返回较大值 1 。

解：
一次循环 ，注意数字会有点大

```py
class Solution:
    def findClosestNumber(self, nums: List[int]) -> int:
        the_min = 9999999
        res = 0
        for i in nums:
            abs_i = abs(i)
            if abs_i < the_min:
                the_min = abs(i)
                res = i
            elif abs_i == the_min:
                if i >= res:
                    res = i
        return res
```
---


2239. 找到最接近 0 的数字    --2
给你一个长度为 n 的整数数组 nums ，请你返回 nums 中最 接近 0 的数字。如果有多个答案，请你返回它们中的 最大值 。

 

示例 1：

输入：nums = [-4,-2,1,4,8]
输出：1
解释：
-4 到 0 的距离为 |-4| = 4 。
-2 到 0 的距离为 |-2| = 2 。
1 到 0 的距离为 |1| = 1 。
4 到 0 的距离为 |4| = 4 。
8 到 0 的距离为 |8| = 8 。
所以，数组中距离 0 最近的数字为 1 。
示例 2：

输入：nums = [2,-1,1]
输出：1
解释：1 和 -1 都是距离 0 最近的数字，所以返回较大值 1 。

解：
一次循环  用max优化一下  91+

```py
class Solution:
    def findClosestNumber(self, nums: List[int]) -> int:
        the_min = 9999999
        res = 0
        for i in nums:
            abs_i = abs(i)
            if abs_i < the_min:
                the_min = abs(i)
                res = i
            elif abs_i == the_min:
                res = max(res, i)
        return res
```
---


2239. 找到最接近 0 的数字    --3
给你一个长度为 n 的整数数组 nums ，请你返回 nums 中最 接近 0 的数字。如果有多个答案，请你返回它们中的 最大值 。

 

示例 1：

输入：nums = [-4,-2,1,4,8]
输出：1
解释：
-4 到 0 的距离为 |-4| = 4 。
-2 到 0 的距离为 |-2| = 2 。
1 到 0 的距离为 |1| = 1 。
4 到 0 的距离为 |4| = 4 。
8 到 0 的距离为 |8| = 8 。
所以，数组中距离 0 最近的数字为 1 。
示例 2：

输入：nums = [2,-1,1]
输出：1
解释：1 和 -1 都是距离 0 最近的数字，所以返回较大值 1 。

解：
排序：按照“绝对值升序，值本身降序”进行二次排序

```py
class Solution:
    def findClosestNumber(self, nums: List[int]) -> int:
        nums.sort(key=lambda x: [abs(x), -x])
        return nums[0]
```
---
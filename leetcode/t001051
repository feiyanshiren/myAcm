1051. 高度检查器

学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。

请你返回能让所有学生以 非递减 高度排列的最小必要移动人数。

注意，当一组学生被选中时，他们之间可以以任何可能的方式重新排序，而未被选中的学生应该保持不动。

 

示例：

输入：heights = [1,1,4,2,1,3]
输出：3 
解释：
当前数组：[1,1,4,2,1,3]
目标数组：[1,1,1,2,3,4]
在下标 2 处（从 0 开始计数）出现 4 vs 1 ，所以我们必须移动这名学生。
在下标 4 处（从 0 开始计数）出现 1 vs 3 ，所以我们必须移动这名学生。
在下标 5 处（从 0 开始计数）出现 3 vs 4 ，所以我们必须移动这名学生。

示例 2：

输入：heights = [5,1,2,3,4]
输出：5

示例 3：

输入：heights = [1,2,3,4,5]
输出：0

 

提示：

    1 <= heights.length <= 100
    1 <= heights[i] <= 100


解：
普通排序然后比较，这题目题意有问题，之前以为是冒泡排序。
```py
class Solution:
    def heightChecker(self, heights: List[int]) -> int:
        h = heights[:]
        h.sort()
        s = 0
        for i in range(len(heights)):
            if h[i] != heights[i]:
                s += 1
        return s
```
---

1051. 高度检查器   --2

学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。

请你返回能让所有学生以 非递减 高度排列的最小必要移动人数。

注意，当一组学生被选中时，他们之间可以以任何可能的方式重新排序，而未被选中的学生应该保持不动。

 

示例：

输入：heights = [1,1,4,2,1,3]
输出：3 
解释：
当前数组：[1,1,4,2,1,3]
目标数组：[1,1,1,2,3,4]
在下标 2 处（从 0 开始计数）出现 4 vs 1 ，所以我们必须移动这名学生。
在下标 4 处（从 0 开始计数）出现 1 vs 3 ，所以我们必须移动这名学生。
在下标 5 处（从 0 开始计数）出现 3 vs 4 ，所以我们必须移动这名学生。

示例 2：

输入：heights = [5,1,2,3,4]
输出：5

示例 3：

输入：heights = [1,2,3,4,5]
输出：0

 

提示：

    1 <= heights.length <= 100
    1 <= heights[i] <= 100


解：
桶排序，因为基数是100很少。
```py
class Solution:
    def heightChecker(self, heights: List[int]) -> int:
        h = [0] * 101
        for i in heights:
            h[i] += 1
        # print(h)
        s = 0
        t = 0
        for i in range(101):
            if h[i] != 0:
                for j in range(h[i]):
                    if i != heights[t]:
                        s += 1
                    t += 1
        return s
```
---


1051. 高度检查器   --3

学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。

请你返回能让所有学生以 非递减 高度排列的最小必要移动人数。

注意，当一组学生被选中时，他们之间可以以任何可能的方式重新排序，而未被选中的学生应该保持不动。

 

示例：

输入：heights = [1,1,4,2,1,3]
输出：3 
解释：
当前数组：[1,1,4,2,1,3]
目标数组：[1,1,1,2,3,4]
在下标 2 处（从 0 开始计数）出现 4 vs 1 ，所以我们必须移动这名学生。
在下标 4 处（从 0 开始计数）出现 1 vs 3 ，所以我们必须移动这名学生。
在下标 5 处（从 0 开始计数）出现 3 vs 4 ，所以我们必须移动这名学生。

示例 2：

输入：heights = [5,1,2,3,4]
输出：5

示例 3：

输入：heights = [1,2,3,4,5]
输出：0

 

提示：

    1 <= heights.length <= 100
    1 <= heights[i] <= 100


解：
桶排序，因为基数是100很少。go语言版
```go
func heightChecker(heights []int) int {
    var h[101]int
    for _, v := range heights{
        h[v]++
    }
    // fmt.Println(h)
    s := 0
    t := 0
    for i := 0; i < 101; i++{
        if h[i] != 0{
            for h[i] > 0{
                h[i]--
                if i != heights[t]{
                    s++
                }
                t++
            }
        }
    }
    return s
}
```
---

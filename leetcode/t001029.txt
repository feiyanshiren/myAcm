1029. 两地调度

公司计划面试 2N 人。第 i 人飞往 A 市的费用为 costs[i][0]，飞往 B 市的费用为 costs[i][1]。

返回将每个人都飞到某座城市的最低费用，要求每个城市都有 N 人抵达。

 

示例：

输入：[[10,20],[30,200],[400,50],[30,20]]
输出：110
解释：
第一个人去 A 市，费用为 10。
第二个人去 A 市，费用为 30。
第三个人去 B 市，费用为 50。
第四个人去 B 市，费用为 20。

最低总费用为 10 + 30 + 50 + 20 = 110，每个城市都有一半的人在面试。

 

提示：

    1 <= costs.length <= 100
    costs.length 为偶数
    1 <= costs[i][0], costs[i][1] <= 1000

解：
分析，需要先定差值最大的那个就行了。

```py
class Solution:
    def twoCitySchedCost(self, costs: List[List[int]]) -> int:
        costs.sort(key=lambda x:abs(x[0] - x[1]), reverse=True)
        print(costs)
        l2 = len(costs) // 2
        a = []
        b = []
        for i in costs:
            if len(a) < l2 and len(b) < l2:
                if i[0] <= i[1]:
                    a.append(i[0])
                else:
                    b.append(i[1])
            else:
                if len(a) != len(b):
                    if len(a) < len(b):
                        a.append(i[0])
                    else:
                        b.append(i[1])
        # print(a, b)
        return sum(a) + sum(b)
```
---


1029. 两地调度    --2

公司计划面试 2N 人。第 i 人飞往 A 市的费用为 costs[i][0]，飞往 B 市的费用为 costs[i][1]。

返回将每个人都飞到某座城市的最低费用，要求每个城市都有 N 人抵达。

 

示例：

输入：[[10,20],[30,200],[400,50],[30,20]]
输出：110
解释：
第一个人去 A 市，费用为 10。
第二个人去 A 市，费用为 30。
第三个人去 B 市，费用为 50。
第四个人去 B 市，费用为 20。

最低总费用为 10 + 30 + 50 + 20 = 110，每个城市都有一半的人在面试。

 

提示：

    1 <= costs.length <= 100
    costs.length 为偶数
    1 <= costs[i][0], costs[i][1] <= 1000

解：
方法一：贪心

分析

我们这样来看这个问题，公司首先将这 2N2N2N 个人全都安排飞往 BBB 市，再选出 NNN 个人改变它们的行程，让他们飞往 AAA 市。如果选择改变一个人的行程，那么公司将会额外付出 price_A - price_B 的费用，这个费用可正可负。

bla

因此最优的方案是，选出 price_A - price_B 最小的 NNN 个人，让他们飞往 A 市，其余人飞往 B 市。

算法

    按照 price_A - price_B 从小到大排序；

    将前 NNN 个人飞往 A 市，其余人飞往 B 市，并计算出总费用。

```py
class Solution:
    def twoCitySchedCost(self, costs: List[List[int]]) -> int:
        # Sort by a gain which company has 
        # by sending a person to city A and not to city B
        costs.sort(key = lambda x : x[0] - x[1])
        
        total = 0
        n = len(costs) // 2
        # To optimize the company expenses,
        # send the first n persons to the city A
        # and the others to the city B
        for i in range(n):
            total += costs[i][0] + costs[i + n][1]
        return total
```
---


1029. 两地调度    --3

公司计划面试 2N 人。第 i 人飞往 A 市的费用为 costs[i][0]，飞往 B 市的费用为 costs[i][1]。

返回将每个人都飞到某座城市的最低费用，要求每个城市都有 N 人抵达。

 

示例：

输入：[[10,20],[30,200],[400,50],[30,20]]
输出：110
解释：
第一个人去 A 市，费用为 10。
第二个人去 A 市，费用为 30。
第三个人去 B 市，费用为 50。
第四个人去 B 市，费用为 20。

最低总费用为 10 + 30 + 50 + 20 = 110，每个城市都有一半的人在面试。

 

提示：

    1 <= costs.length <= 100
    costs.length 为偶数
    1 <= costs[i][0], costs[i][1] <= 1000

解：
go 语言版

```py
type IntSlice [][]int
func (s IntSlice) Len() int { return len(s) }
func (s IntSlice) Swap(i, j int){ s[i], s[j] = s[j], s[i] }
func (s IntSlice) Less(i, j int) bool { return s[i][0] - s[i][1] < s[j][0] - s[j][1]}

func twoCitySchedCost(costs [][]int) int {
    sort.Sort(IntSlice(costs))
    t := 0
    n := len(costs) / 2
    for i := 0; i < n; i++{
        t += costs[i][0] + costs[i + n][1]
    }
    return t
}

```
---
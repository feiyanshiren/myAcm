1234. 替换子串得到平衡字符串
提示
中等
262
相关企业

有一个只含有 'Q', 'W', 'E', 'R' 四种字符，且长度为 n 的字符串。

假如在该字符串中，这四个字符都恰好出现 n/4 次，那么它就是一个「平衡字符串」。

 

给你一个这样的字符串 s，请通过「替换一个子串」的方式，使原字符串 s 变成一个「平衡字符串」。

你可以用和「待替换子串」长度相同的 任何 其他字符串来完成替换。

请返回待替换子串的最小可能长度。

如果原字符串自身就是一个平衡字符串，则返回 0。

 

示例 1：

输入：s = "QWER"
输出：0
解释：s 已经是平衡的了。

示例 2：

输入：s = "QQWE"
输出：1
解释：我们需要把一个 'Q' 替换成 'R'，这样得到的 "RQWE" (或 "QRWE") 是平衡的。

示例 3：

输入：s = "QQQW"
输出：2
解释：我们可以把前面的 "QQ" 替换成 "ER"。 

示例 4：

输入：s = "QQQQ"
输出：3
解释：我们可以替换后 3 个 'Q'，使 s = "QWER"。

 

提示：

    1 <= s.length <= 10^5
    s.length 是 4 的倍数
    s 中只含有 'Q', 'W', 'E', 'R' 四种字符



解：
困
按照自己的理解老是超时，窗口要滑动才行 要固定一个一个的来，一不小心就写成暴力了

```py
class Solution:
    def balancedString(self, s: str) -> int:

        # 判断是否可以变换
        def check(map_count, l, r):
            max_count = 0
            max_count = max(max_count, max(map_count["Q"], max(map_count["W"], map_count["E"], map_count["R"])))
            diff = max_count *4 - map_count["Q"] - map_count["W"] - map_count["E"] - map_count["R"]
            if r - l >= diff and (r - l - diff) % 4 == 0:
                return True
            else:
                return False

        # 统计窗口外的数量  用这个卡
        # def count_out(list_s, l, r):
        #     new_list_s = list_s[0: l] + list_s[r: len_s]
        #     map_count = {"Q": 0, "W": 0, "E": 0, "R": 0}
        #     for v in new_list_s:
        #         map_count[v] = map_count[v] + 1
        #     return map_count
        
        len_s = len(s)
        res = len_s
        main_map_count = {"Q": 0, "W": 0, "E": 0, "R": 0}
        for v in s:
            main_map_count[v] = main_map_count[v] + 1
        map_count2 = main_map_count.copy()

        # if main_map_count["Q"] == main_map_count["W"] and main_map_count["W"] == main_map_count["E"] and main_map_count["E"] == main_map_count["R"]:
        #     return True

        # 设置一个窗口
        l = 0
        r = 0
        mark = 0
        out = 0

        while l <= r:
            while r <= len_s:
                # map_count = count_out(s, l, r)
                
                # print(map_count)
                ce = check(main_map_count, l, r)
                # print(ce)
                if(ce):
                    # 记录结果比较最小的
                    res = min(res, r - l)
                    mark = 1
                    break

                if not mark:
                    if r < len_s:       
                        main_map_count[s[r]] -= 1
                        # print(main_map_count) 
                    
                    r += 1
                else:
                    mark = 0
                    # break
                     
            # main_map_count = map_count2.copy()
            if l < len_s:
                main_map_count[s[l]] += 1
            l += 1
            # r = l + 1
            
            if out:
                break
        return res
```

---
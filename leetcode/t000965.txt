965. 单值二叉树

如果二叉树每个节点都具有相同的值，那么该二叉树就是单值二叉树。

只有给定的树是单值二叉树时，才返回 true；否则返回 false。

 

示例 1：

输入：[1,1,1,1,1,null,1]
输出：true

示例 2：

输入：[2,2,2,5,2]
输出：false

 

提示：

    给定树的节点数范围是 [1, 100]。
    每个节点的值都是整数，范围为 [0, 99] 。

解：
递归

```py
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isUnivalTree(self, root: TreeNode) -> bool:
        self.a = -1
        self.res = True
        def f(node):
            if not node:
                return
            else:
                if self.a == -1:
                    self.a = node.val
                    if node.left:
                        f(node.left)
                    if node.right:
                        f(node.right)
                else:
                    if self.a != node.val:
                        self.res = False
                        return
                    else:
                        if node.left:
                            f(node.left)
                        if node.right:
                            f(node.right)
        f(root)
        return self.res
```

---




965. 单值二叉树    --2

如果二叉树每个节点都具有相同的值，那么该二叉树就是单值二叉树。

只有给定的树是单值二叉树时，才返回 true；否则返回 false。

 

示例 1：

输入：[1,1,1,1,1,null,1]
输出：true

示例 2：

输入：[2,2,2,5,2]
输出：false

 

提示：

    给定树的节点数范围是 [1, 100]。
    每个节点的值都是整数，范围为 [0, 99] 。

解：
迭代

```py
class Solution:
    def isUnivalTree(self, root: TreeNode) -> bool:
        a = -1
        res = True
        l = [root]
        while len(l):
            node = l.pop(0)
            if not node:
                continue
            else:
                if a == -1:
                    a = node.val
                    if node.left:
                        l.append(node.left)
                    if node.right:
                        l.append(node.right) 
                else:
                    if a != node.val:
                        res = False
                        break
                    else:
                        if node.left:
                            l.append(node.left)
                        if node.right:
                            l.append(node.right)

        return res
```
---
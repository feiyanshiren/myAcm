1022. 从根到叶的二进制数之和

给出一棵二叉树，其上每个结点的值都是 0 或 1 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为 0 -> 1 -> 1 -> 0 -> 1，那么它表示二进制数 01101，也就是 13 。

对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。

以 10^9 + 7 为模，返回这些数字之和。

 

示例：

输入：[1,0,1,0,1,0,1]
输出：22
解释：(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22

 

提示：

    树中的结点数介于 1 和 1000 之间。
    node.val 为 0 或 1 。

解：
深度优先搜索，
当没有子节点的时候，用字符串数组记录路径，最后计算

```py
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sumRootToLeaf(self, root: TreeNode) -> int:
        self.h = []
        def sub(node, s):
            s += str(node.val)
            if node.left:
                sub(node.left, s)
            if node.right:
                sub(node.right, s)
            if not node.left and not node.right:
                self.h.append(s)
        sub(root, "")
        res = 0
        # print(self.h)
        for i in self.h:
            res += int(i, 2)
        return res
```
---


1022. 从根到叶的二进制数之和    --2

给出一棵二叉树，其上每个结点的值都是 0 或 1 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为 0 -> 1 -> 1 -> 0 -> 1，那么它表示二进制数 01101，也就是 13 。

对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。

以 10^9 + 7 为模，返回这些数字之和。

 

示例：

输入：[1,0,1,0,1,0,1]
输出：22
解释：(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22

 

提示：

    树中的结点数介于 1 和 1000 之间。
    node.val 为 0 或 1 。

解：改进
深度优先搜索，
当没有子节点的时候，字符串转int直接累计求和

```py
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sumRootToLeaf(self, root: TreeNode) -> int:
        self.h = []
        def sub(node, s):
            s += str(node.val)
            if node.left:
                sub(node.left, s)
            if node.right:
                sub(node.right, s)
            if not node.left and not node.right:
                self.h.append(s)
        sub(root, "")
        res = 0
        # print(self.h)
        for i in self.h:
            res += int(i, 2)
        return res
```
---


1022. 从根到叶的二进制数之和    --3

给出一棵二叉树，其上每个结点的值都是 0 或 1 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为 0 -> 1 -> 1 -> 0 -> 1，那么它表示二进制数 01101，也就是 13 。

对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。

以 10^9 + 7 为模，返回这些数字之和。

 

示例：

输入：[1,0,1,0,1,0,1]
输出：22
解释：(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22

 

提示：

    树中的结点数介于 1 和 1000 之间。
    node.val 为 0 或 1 。

解：改进
深度优先搜索，
当没有子节点的时候，不需要用字符串，直接位运算求累计和，速度快

```py
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sumRootToLeaf(self, root: TreeNode) -> int:
        self.h = []
        def sub(node, s):
            s += str(node.val)
            if node.left:
                sub(node.left, s)
            if node.right:
                sub(node.right, s)
            if not node.left and not node.right:
                self.h.append(s)
        sub(root, "")
        res = 0
        # print(self.h)
        for i in self.h:
            res += int(i, 2)
        return res
```
---


1022. 从根到叶的二进制数之和    --4

给出一棵二叉树，其上每个结点的值都是 0 或 1 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为 0 -> 1 -> 1 -> 0 -> 1，那么它表示二进制数 01101，也就是 13 。

对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。

以 10^9 + 7 为模，返回这些数字之和。

 

示例：

输入：[1,0,1,0,1,0,1]
输出：22
解释：(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22

 

提示：

    树中的结点数介于 1 和 1000 之间。
    node.val 为 0 或 1 。

解：
go 语言版，
注意go语言不能嵌套定义函数，可以匿名函数，struct里的公共参数第一个字母要大写

```go
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
var h int

func sumRootToLeaf(root *TreeNode) int {
    h = 0   
    sub(root, 0)
    return h
}

func sub(node *TreeNode, s int){
        if node == nil{
            return
        }
        s = s << 1
        s = s | node.Val
        if node.Left == nil && node.Right == nil{
            h += s
        }else{
            sub(node.Left, s)
            sub(node.Right, s)
        }
}
```
---
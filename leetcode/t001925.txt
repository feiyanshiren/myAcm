1925. 统计平方和三元组的数目

一个 平方和三元组 (a,b,c) 指的是满足 a2 + b2 = c2 的 整数 三元组 a，b 和 c 。

给你一个整数 n ，请你返回满足 1 <= a, b, c <= n 的 平方和三元组 的数目。

 

示例 1：

输入：n = 5
输出：2
解释：平方和三元组为 (3,4,5) 和 (4,3,5) 。

示例 2：

输入：n = 10
输出：4
解释：平方和三元组为 (3,4,5)，(4,3,5)，(6,8,10) 和 (8,6,10) 。

 

提示：

    1 <= n <= 250



解：
暴力,可以少一点点循环，估计要超时
```py
import math

class Solution:
    def countTriples(self, n: int) -> int:
        if n <= 4:
            return 0
        res = 0
        for a in range(3, n + 1):
            for b in range(a + 1, n + 1):
                if a == b:
                    continue
                t = a * a + b * b
                m = math.sqrt(t)
                if m > n or m - int(m) != 0:
                    continue
                res += 2
        return res
    
```
---


1925. 统计平方和三元组的数目    --2

一个 平方和三元组 (a,b,c) 指的是满足 a2 + b2 = c2 的 整数 三元组 a，b 和 c 。

给你一个整数 n ，请你返回满足 1 <= a, b, c <= n 的 平方和三元组 的数目。

 

示例 1：

输入：n = 5
输出：2
解释：平方和三元组为 (3,4,5) 和 (4,3,5) 。

示例 2：

输入：n = 10
输出：4
解释：平方和三元组为 (3,4,5)，(4,3,5)，(6,8,10) 和 (8,6,10) 。

 

提示：

    1 <= n <= 250



解：
暴力,可以少一点点循环，精简一下，居然没超时 77+
```py
import math
class Solution:
    def countTriples(self, n: int) -> int:
        if n <= 4:
            return 0
        res = 0
        for a in range(3, n):
            for b in range(a + 1, n + 1):
                m = math.sqrt(a * a + b * b)
                if m > n or m - int(m) != 0:
                    continue
                res += 2
        return res
```
---


1925. 统计平方和三元组的数目    --3

一个 平方和三元组 (a,b,c) 指的是满足 a2 + b2 = c2 的 整数 三元组 a，b 和 c 。

给你一个整数 n ，请你返回满足 1 <= a, b, c <= n 的 平方和三元组 的数目。

 

示例 1：

输入：n = 5
输出：2
解释：平方和三元组为 (3,4,5) 和 (4,3,5) 。

示例 2：

输入：n = 10
输出：4
解释：平方和三元组为 (3,4,5)，(4,3,5)，(6,8,10) 和 (8,6,10) 。

 

提示：

    1 <= n <= 250



解：
go 语言 100+ 100+
```go
func countTriples(n int) int {
	if n <= 4 {
		return 0
	}
	res := 0
	for a := 3; a < n; a++ {
		for b := a + 1; b < n+1; b++ {
			m := math.Sqrt(float64(a*a + b*b))
			if m > float64(n) || m != float64(int64(m)) {
				continue
			}
			res += 2
		}
	}
	return res
}
```
---
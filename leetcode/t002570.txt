2570. 合并两个二维数组 - 求和法
提示
简单
12
相关企业

给你两个 二维 整数数组 nums1 和 nums2.

    nums1[i] = [idi, vali] 表示编号为 idi 的数字对应的值等于 vali 。
    nums2[i] = [idi, vali] 表示编号为 idi 的数字对应的值等于 vali 。

每个数组都包含 互不相同 的 id ，并按 id 以 递增 顺序排列。

请你将两个数组合并为一个按 id 以递增顺序排列的数组，并符合下述条件：

    只有在两个数组中至少出现过一次的 id 才能包含在结果数组内。
    每个 id 在结果数组中 只能出现一次 ，并且其对应的值等于两个数组中该 id 所对应的值求和。如果某个数组中不存在该 id ，则认为其对应的值等于 0 。

返回结果数组。返回的数组需要按 id 以递增顺序排列。

 

示例 1：

输入：nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]
输出：[[1,6],[2,3],[3,2],[4,6]]
解释：结果数组中包含以下元素：
- id = 1 ，对应的值等于 2 + 4 = 6 。
- id = 2 ，对应的值等于 3 。
- id = 3 ，对应的值等于 2 。
- id = 4 ，对应的值等于5 + 1 = 6 。

示例 2：

输入：nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]
输出：[[1,3],[2,4],[3,6],[4,3],[5,5]]
解释：不存在共同 id ，在结果数组中只需要包含每个 id 和其对应的值。

 

提示：

    1 <= nums1.length, nums2.length <= 200
    nums1[i].length == nums2[j].length == 2
    1 <= idi, vali <= 1000
    数组中的 id 互不相同
    数据均按 id 以严格递增顺序排列


解：
dict + 排序

```py
class Solution:
    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:
        s1 = {}
        s2 = {}
        for num in nums1:
            s1[num[0]] = num[1]
        for num in nums2:
            s2[num[0]] = num[1]
        s3 = {}
        for key, val in s1.items():
            if key in s2:
                s3[key] = val + s2[key]
            else:
                s3[key] = val
        for key, val in s2.items():
            if key not in s1:
                s3[key] = val
        s3 = sorted(s3.items(), key=lambda x: x[0])
        res = [list(i) for i in s3]
        return res
```

---



2570. 合并两个二维数组 - 求和法    --2
提示
简单
12
相关企业

给你两个 二维 整数数组 nums1 和 nums2.

    nums1[i] = [idi, vali] 表示编号为 idi 的数字对应的值等于 vali 。
    nums2[i] = [idi, vali] 表示编号为 idi 的数字对应的值等于 vali 。

每个数组都包含 互不相同 的 id ，并按 id 以 递增 顺序排列。

请你将两个数组合并为一个按 id 以递增顺序排列的数组，并符合下述条件：

    只有在两个数组中至少出现过一次的 id 才能包含在结果数组内。
    每个 id 在结果数组中 只能出现一次 ，并且其对应的值等于两个数组中该 id 所对应的值求和。如果某个数组中不存在该 id ，则认为其对应的值等于 0 。

返回结果数组。返回的数组需要按 id 以递增顺序排列。

 

示例 1：

输入：nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]
输出：[[1,6],[2,3],[3,2],[4,6]]
解释：结果数组中包含以下元素：
- id = 1 ，对应的值等于 2 + 4 = 6 。
- id = 2 ，对应的值等于 3 。
- id = 3 ，对应的值等于 2 。
- id = 4 ，对应的值等于5 + 1 = 6 。

示例 2：

输入：nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]
输出：[[1,3],[2,4],[3,6],[4,3],[5,5]]
解释：不存在共同 id ，在结果数组中只需要包含每个 id 和其对应的值。

 

提示：

    1 <= nums1.length, nums2.length <= 200
    nums1[i].length == nums2[j].length == 2
    1 <= idi, vali <= 1000
    数组中的 id 互不相同
    数据均按 id 以严格递增顺序排列


解：
dict + 排序
使用 go  gods

```go
func mergeArrays(nums1 [][]int, nums2 [][]int) [][]int {
	s1 := hashmap.New()
	s2 := hashmap.New()
	for _, v := range nums1 {
		s1.Put(v[0], v[1])
	}
	for _, v := range nums2 {
		s2.Put(v[0], v[1])
	}
	s3 := hashmap.New()
	for _, k := range s1.Keys() {
		v1, _ := s1.Get(k)
		v2, ifHas2 := s2.Get(k)
		if ifHas2 {
			s3.Put(k, v1.(int)+v2.(int))
		} else {
			s3.Put(k, v1.(int))
		}
	}
	for _, k := range s2.Keys() {
		v2, _ := s2.Get(k)
		_, ifHas1 := s1.Get(k)
		if !ifHas1 {
			s3.Put(k, v2.(int))
		}
	}
	k3Keys := arraylist.New()
	for _, k := range s3.Keys() {
		k3Keys.Add(k)
	}
	k3Keys.Sort(utils.IntComparator)
	// fmt.Println(s3)
	// fmt.Println(k3Keys)

	var res [][]int
	for _, v := range k3Keys.Values() {
		v3, _ := s3.Get(v)
		res = append(res, []int{v.(int), v3.(int)})
	}

	return res
}
```

---
1299. 将每个元素替换为右侧最大元素
给你一个数组 arr ，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用 -1 替换。

完成所有替换操作后，请你返回这个数组。

 

示例：

输入：arr = [17,18,5,4,6,1]
输出：[18,6,6,6,1,-1]
 

提示：

1 <= arr.length <= 10^4
1 <= arr[i] <= 10^5

解：
递归，效率低
```py
class Solution:
    def replaceElements(self, arr: List[int]) -> List[int]:
        def f(ar):
            if len(ar) == 1:
                return [-1]
            return [max(ar[1:])] + f(ar[1:])
        return f(arr)
```
---


1299. 将每个元素替换为右侧最大元素    --2
给你一个数组 arr ，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用 -1 替换。

完成所有替换操作后，请你返回这个数组。

 

示例：

输入：arr = [17,18,5,4,6,1]
输出：[18,6,6,6,1,-1]
 

提示：

1 <= arr.length <= 10^4
1 <= arr[i] <= 10^5

解：
python，从后面开始遍历
```py
class Solution(object):
    def replaceElements(self, arr):
        dp = [-1]*len(arr)
        for i in range(len(arr)-2,-1,-1):
            dp[i] = max(arr[i+1],dp[i+1])
        return dp
```
---


1299. 将每个元素替换为右侧最大元素    --3
给你一个数组 arr ，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用 -1 替换。

完成所有替换操作后，请你返回这个数组。

 

示例：

输入：arr = [17,18,5,4,6,1]
输出：[18,6,6,6,1,-1]
 

提示：

1 <= arr.length <= 10^4
1 <= arr[i] <= 10^5

解：
倒起来的递归
```py
class Solution:
    def replaceElements(self, arr: List[int]) -> List[int]:
        def f(ar, mx):
            if len(ar) == 1:
                return [mx]
            return f(ar[: -1], max(ar[-1], mx)) + [mx]
        return f(arr, -1)
```
---

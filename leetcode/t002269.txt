2269. 找到一个数字的 K 美丽值
一个整数 num 的 k 美丽值定义为 num 中符合以下条件的 子字符串 数目：

子字符串长度为 k 。
子字符串能整除 num 。
给你整数 num 和 k ，请你返回 num 的 k 美丽值。

注意：

允许有 前缀 0 。
0 不能整除任何值。
一个 子字符串 是一个字符串里的连续一段字符序列。

 

示例 1：

输入：num = 240, k = 2
输出：2
解释：以下是 num 里长度为 k 的子字符串：
- "240" 中的 "24" ：24 能整除 240 。
- "240" 中的 "40" ：40 能整除 240 。
所以，k 美丽值为 2 。
示例 2：

输入：num = 430043, k = 2
输出：2
解释：以下是 num 里长度为 k 的子字符串：
- "430043" 中的 "43" ：43 能整除 430043 。
- "430043" 中的 "30" ：30 不能整除 430043 。
- "430043" 中的 "00" ：0 不能整除 430043 。
- "430043" 中的 "04" ：4 不能整除 430043 。
- "430043" 中的 "43" ：43 能整除 430043 。
所以，k 美丽值为 2 。
 

提示：

1 <= num <= 109
1 <= k <= num.length （将 num 视为字符串）

解：
转字符串后拆分再判断

```py
class Solution:
    def divisorSubstrings(self, num: int, k: int) -> int:
        li = []
        str_num = str(num)
        for i in range(0, len(str_num) - k + 1):
            li.append(str_num[i: i + k])
        res = 0
        for i in li:
            int_i = int(i)
            if int_i != 0 and num % int_i == 0:
                res += 1
        return res

```

---



2269. 找到一个数字的 K 美丽值    --2
一个整数 num 的 k 美丽值定义为 num 中符合以下条件的 子字符串 数目：

子字符串长度为 k 。
子字符串能整除 num 。
给你整数 num 和 k ，请你返回 num 的 k 美丽值。

注意：

允许有 前缀 0 。
0 不能整除任何值。
一个 子字符串 是一个字符串里的连续一段字符序列。

 

示例 1：

输入：num = 240, k = 2
输出：2
解释：以下是 num 里长度为 k 的子字符串：
- "240" 中的 "24" ：24 能整除 240 。
- "240" 中的 "40" ：40 能整除 240 。
所以，k 美丽值为 2 。
示例 2：

输入：num = 430043, k = 2
输出：2
解释：以下是 num 里长度为 k 的子字符串：
- "430043" 中的 "43" ：43 能整除 430043 。
- "430043" 中的 "30" ：30 不能整除 430043 。
- "430043" 中的 "00" ：0 不能整除 430043 。
- "430043" 中的 "04" ：4 不能整除 430043 。
- "430043" 中的 "43" ：43 能整除 430043 。
所以，k 美丽值为 2 。
 

提示：

1 <= num <= 109
1 <= k <= num.length （将 num 视为字符串）

解：
转字符串后拆分再判断
精简到一个循环

```py
class Solution:
    def divisorSubstrings(self, num: int, k: int) -> int:
        str_num = str(num)
        res = 0
        for i in range(0, len(str_num) - k + 1):
            int_i = int(str_num[i: i + k])
            if int_i != 0 and num % int_i == 0:
                res += 1
        return res


```

---



2269. 找到一个数字的 K 美丽值    --3
一个整数 num 的 k 美丽值定义为 num 中符合以下条件的 子字符串 数目：

子字符串长度为 k 。
子字符串能整除 num 。
给你整数 num 和 k ，请你返回 num 的 k 美丽值。

注意：

允许有 前缀 0 。
0 不能整除任何值。
一个 子字符串 是一个字符串里的连续一段字符序列。

 

示例 1：

输入：num = 240, k = 2
输出：2
解释：以下是 num 里长度为 k 的子字符串：
- "240" 中的 "24" ：24 能整除 240 。
- "240" 中的 "40" ：40 能整除 240 。
所以，k 美丽值为 2 。
示例 2：

输入：num = 430043, k = 2
输出：2
解释：以下是 num 里长度为 k 的子字符串：
- "430043" 中的 "43" ：43 能整除 430043 。
- "430043" 中的 "30" ：30 不能整除 430043 。
- "430043" 中的 "00" ：0 不能整除 430043 。
- "430043" 中的 "04" ：4 不能整除 430043 。
- "430043" 中的 "43" ：43 能整除 430043 。
所以，k 美丽值为 2 。
 

提示：

1 <= num <= 109
1 <= k <= num.length （将 num 视为字符串）

解：
转字符串后拆分再判断
精简到2行用列表推倒式

```py
class Solution:
    def divisorSubstrings(self, num: int, k: int) -> int:
        str_num = str(num)
        return len([int(str_num[i: i + k]) for i in range(0, len(str_num) - k + 1) if int(str_num[i: i + k]) != 0 and num % int(str_num[i: i + k]) == 0])


```

---
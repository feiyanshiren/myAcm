144. 二叉树的前序遍历

给你二叉树的根节点 root ，返回它节点值的 前序 遍历。

 

示例 1：

输入：root = [1,null,2,3]
输出：[1,2,3]

示例 2：

输入：root = []
输出：[]

示例 3：

输入：root = [1]
输出：[1]

示例 4：

输入：root = [1,2]
输出：[1,2]

示例 5：

输入：root = [1,null,2]
输出：[1,2]

 

提示：

    树中节点数目在范围 [0, 100] 内
    -100 <= Node.val <= 100

解：
递归
95+
```py
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            return []            
        return  [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right)
```
---



144. 二叉树的前序遍历   --2

给你二叉树的根节点 root ，返回它节点值的 前序 遍历。

 

示例 1：

输入：root = [1,null,2,3]
输出：[1,2,3]

示例 2：

输入：root = []
输出：[]

示例 3：

输入：root = [1]
输出：[1]

示例 4：

输入：root = [1,2]
输出：[1,2]

示例 5：

输入：root = [1,null,2]
输出：[1,2]

 

提示：

    树中节点数目在范围 [0, 100] 内
    -100 <= Node.val <= 100

解：
迭代,98+

```py
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        sk = [root]
        res = []
        while sk:
            a = sk.pop()
            if not a:
                continue
            res.append(a.val)
            sk.append(a.right)
            sk.append(a.left)
        return res
```
---


144. 二叉树的前序遍历   --3

给你二叉树的根节点 root ，返回它节点值的 前序 遍历。

 

示例 1：

输入：root = [1,null,2,3]
输出：[1,2,3]

示例 2：

输入：root = []
输出：[]

示例 3：

输入：root = [1]
输出：[1]

示例 4：

输入：root = [1,2]
输出：[1,2]

示例 5：

输入：root = [1,null,2]
输出：[1,2]

 

提示：

    树中节点数目在范围 [0, 100] 内
    -100 <= Node.val <= 100

解：
迭代,100+
注意 go 没有pop
```go
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func preorderTraversal(root *TreeNode) []int {
    sk := make([]*TreeNode, 0)
    sk = append(sk, root)
    res := make([]int, 0)
    for len(sk) > 0{
        a := sk[len(sk) - 1]
        sk = sk[:len(sk) - 1]
        if a == nil{
            continue
        }
        res = append(res, a.Val)
        sk = append(sk, a.Right)
        sk = append(sk, a.Left)
    }
    return res
}
```
---
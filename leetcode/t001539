1539. 第 k 个缺失的正整数
给你一个 严格升序排列 的正整数数组 arr 和一个整数 k 。

请你找到这个数组里第 k 个缺失的正整数。

 

示例 1：

输入：arr = [2,3,4,7,11], k = 5
输出：9
解释：缺失的正整数包括 [1,5,6,8,9,10,12,13,...] 。第 5 个缺失的正整数为 9 。
示例 2：

输入：arr = [1,2,3,4], k = 2
输出：6
解释：缺失的正整数包括 [5,6,7,...] 。第 2 个缺失的正整数为 6 。
 

提示：

1 <= arr.length <= 1000
1 <= arr[i] <= 1000
1 <= k <= 1000
对于所有 1 <= i < j <= arr.length 的 i 和 j 满足 arr[i] < arr[j]
解：
使用set 来减，注意排序， 95+

```py
class Solution:
    def findKthPositive(self, arr: List[int], k: int) -> int:
        a = set(arr)
        b = {i for i in range(1, k + len(arr) + 1)}
        c = list(b - a)
        c.sort()
        # print(c)
        return list(c)[k - 1]
```
---


1539. 第 k 个缺失的正整数    --2
给你一个 严格升序排列 的正整数数组 arr 和一个整数 k 。

请你找到这个数组里第 k 个缺失的正整数。

 

示例 1：

输入：arr = [2,3,4,7,11], k = 5
输出：9
解释：缺失的正整数包括 [1,5,6,8,9,10,12,13,...] 。第 5 个缺失的正整数为 9 。
示例 2：

输入：arr = [1,2,3,4], k = 2
输出：6
解释：缺失的正整数包括 [5,6,7,...] 。第 2 个缺失的正整数为 6 。
 

提示：

1 <= arr.length <= 1000
1 <= arr[i] <= 1000
1 <= k <= 1000
对于所有 1 <= i < j <= arr.length 的 i 和 j 满足 arr[i] < arr[j]

解：
暴力循环判断，效率低
```py
class Solution:
    def findKthPositive(self, arr: List[int], k: int) -> int:
        l_a = len(arr)
        a = []
        for i in range(1, l_a + k + 1):
            if i not in arr:
                a.append(i)
        # print(a)
        return a[k - 1]
```
---


1539. 第 k 个缺失的正整数    --3
给你一个 严格升序排列 的正整数数组 arr 和一个整数 k 。

请你找到这个数组里第 k 个缺失的正整数。

 

示例 1：

输入：arr = [2,3,4,7,11], k = 5
输出：9
解释：缺失的正整数包括 [1,5,6,8,9,10,12,13,...] 。第 5 个缺失的正整数为 9 。
示例 2：

输入：arr = [1,2,3,4], k = 2
输出：6
解释：缺失的正整数包括 [5,6,7,...] 。第 2 个缺失的正整数为 6 。
 

提示：

1 <= arr.length <= 1000
1 <= arr[i] <= 1000
1 <= k <= 1000
对于所有 1 <= i < j <= arr.length 的 i 和 j 满足 arr[i] < arr[j]

解：
一种是缺失元素小于数组最大数，一种是缺失元素大于最大数
```py

class Solution(object):
    def findKthPositive(self, arr, k):
        """
        :type arr: List[int]
        :type k: int
        :rtype: int
        """
        for i,j in enumerate(arr):
            if j-i-k>0: #此时需在j之前补充缺失元素
                return(i+k)  # j-(j-i-k))
                break
            if i>=len(arr)-1: return(k+len(arr)) #此时数字已在查询范围外，直接计算已有的个数和需补充个数
```
---

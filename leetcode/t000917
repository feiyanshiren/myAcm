917. 仅仅反转字母

给定一个字符串 S，返回 “反转后的” 字符串，其中不是字母的字符都保留在原地，而所有字母的位置发生反转。



示例 1：

输入："ab-cd"
输出："dc-ba"

示例 2：

输入："a-bC-dEf-ghIj"
输出："j-Ih-gfE-dCba"

示例 3：

输入："Test1ng-Leet=code-Q!"
输出："Qedo1ct-eeLg=ntse-T!"



提示：

    S.length <= 100
    33 <= S[i].ASCIIcode <= 122
    S 中不包含 \ or "

解：
首尾指针

```py
class Solution:
    def reverseOnlyLetters(self, S: str) -> str:
        s = list(S)
        first = 0
        last = len(s) - 1
        while first < last:
            if s[first].isalpha() and s[last].isalpha():
                s[first], s[last] = s[last], s[first]
                first += 1
                last -= 1
            elif s[first].isalpha() and not s[last].isalpha():
                last -= 1
            elif not s[first].isalpha() and s[last].isalpha():
                first += 1
            else:
                first += 1
                last -= 1
        return "".join(s)

```

---


917. 仅仅反转字母    --2

给定一个字符串 S，返回 “反转后的” 字符串，其中不是字母的字符都保留在原地，而所有字母的位置发生反转。



示例 1：

输入："ab-cd"
输出："dc-ba"

示例 2：

输入："a-bC-dEf-ghIj"
输出："j-Ih-gfE-dCba"

示例 3：

输入："Test1ng-Leet=code-Q!"
输出："Qedo1ct-eeLg=ntse-T!"



提示：

    S.length <= 100
    33 <= S[i].ASCIIcode <= 122
    S 中不包含 \ or "

解：
使用栈，只存字母

```py
class Solution(object):
    def reverseOnlyLetters(self, S):
        letters = [c for c in S if c.isalpha()]
        ans = []
        for c in S:
            if c.isalpha():
                ans.append(letters.pop())
            else:
                ans.append(c)
        return "".join(ans)

```

---
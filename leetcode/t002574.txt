2574. 左右元素和的差值
提示
简单
15
相关企业

给你一个下标从 0 开始的整数数组 nums ，请你找出一个下标从 0 开始的整数数组 answer ，其中：

    answer.length == nums.length
    answer[i] = |leftSum[i] - rightSum[i]|

其中：

    leftSum[i] 是数组 nums 中下标 i 左侧元素之和。如果不存在对应的元素，leftSum[i] = 0 。
    rightSum[i] 是数组 nums 中下标 i 右侧元素之和。如果不存在对应的元素，rightSum[i] = 0 。

返回数组 answer 。

 

示例 1：

输入：nums = [10,4,8,3]
输出：[15,1,11,22]
解释：数组 leftSum 为 [0,10,14,22] 且数组 rightSum 为 [15,11,3,0] 。
数组 answer 为 [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22] 。

示例 2：

输入：nums = [1]
输出：[0]
解释：数组 leftSum 为 [0] 且数组 rightSum 为 [0] 。
数组 answer 为 [|0 - 0|] = [0] 。

 

提示：

    1 <= nums.length <= 1000
    1 <= nums[i] <= 105


解:
求出左右，使用推导式

```py
class Solution:
    def leftRightDifference(self, nums: List[int]) -> List[int]:
        ll = len(nums)
        leftSum = [sum(nums[:i]) for i in range(ll)]
        rightSum = [sum(nums[i + 1:]) for i in range(ll)]
        return [abs(leftSum[i] - rightSum[i]) for i in range(ll)]
```

---



2574. 左右元素和的差值    --2
提示
简单
15
相关企业

给你一个下标从 0 开始的整数数组 nums ，请你找出一个下标从 0 开始的整数数组 answer ，其中：

    answer.length == nums.length
    answer[i] = |leftSum[i] - rightSum[i]|

其中：

    leftSum[i] 是数组 nums 中下标 i 左侧元素之和。如果不存在对应的元素，leftSum[i] = 0 。
    rightSum[i] 是数组 nums 中下标 i 右侧元素之和。如果不存在对应的元素，rightSum[i] = 0 。

返回数组 answer 。

 

示例 1：

输入：nums = [10,4,8,3]
输出：[15,1,11,22]
解释：数组 leftSum 为 [0,10,14,22] 且数组 rightSum 为 [15,11,3,0] 。
数组 answer 为 [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22] 。

示例 2：

输入：nums = [1]
输出：[0]
解释：数组 leftSum 为 [0] 且数组 rightSum 为 [0] 。
数组 answer 为 [|0 - 0|] = [0] 。

 

提示：

    1 <= nums.length <= 1000
    1 <= nums[i] <= 105


解:
求出左右

```js
var leftRightDifference = function(nums) {
    var res = [];
    for(var i = 0; i < nums.length; i++) {
        var lefts = nums.slice(0, i);
        var rights = nums.slice(i + 1);
        var left = 0;
        lefts.forEach((num) => {
            left += num;
        })
        var right = 0;
        rights.forEach((num) => {
            right += num;
        })
        res.push(Math.abs(left - right));
    }
    
    return res;
};
        return [abs(leftSum[i] - rightSum[i]) for i in range(ll)]
```

---


2574. 左右元素和的差值    --3
提示
简单
15
相关企业

给你一个下标从 0 开始的整数数组 nums ，请你找出一个下标从 0 开始的整数数组 answer ，其中：

    answer.length == nums.length
    answer[i] = |leftSum[i] - rightSum[i]|

其中：

    leftSum[i] 是数组 nums 中下标 i 左侧元素之和。如果不存在对应的元素，leftSum[i] = 0 。
    rightSum[i] 是数组 nums 中下标 i 右侧元素之和。如果不存在对应的元素，rightSum[i] = 0 。

返回数组 answer 。

 

示例 1：

输入：nums = [10,4,8,3]
输出：[15,1,11,22]
解释：数组 leftSum 为 [0,10,14,22] 且数组 rightSum 为 [15,11,3,0] 。
数组 answer 为 [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22] 。

示例 2：

输入：nums = [1]
输出：[0]
解释：数组 leftSum 为 [0] 且数组 rightSum 为 [0] 。
数组 answer 为 [|0 - 0|] = [0] 。

 

提示：

    1 <= nums.length <= 1000
    1 <= nums[i] <= 105


解:
在一个循环里处理

```go
func leftRightDifference(nums []int) []int {
	ll := len(nums)
	res := make([]int, 0)
	for i := 0; i < ll; i++ {
		left := 0
		right := 0
		for j := 0; j < i; j++ {
			left += nums[j]
		}
		for j := i + 1; j < ll; j++ {
			right += nums[j]
		}
		res = append(res, int(math.Abs(float64(left)-float64(right))))
	}
	return res
}
```

---

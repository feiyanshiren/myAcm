1281. 整数的各位积和之差
给你一个整数 n，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。

 

示例 1：

输入：n = 234
输出：15 
解释：
各位数之积 = 2 * 3 * 4 = 24 
各位数之和 = 2 + 3 + 4 = 9 
结果 = 24 - 9 = 15
示例 2：

输入：n = 4421
输出：21
解释： 
各位数之积 = 4 * 4 * 2 * 1 = 32 
各位数之和 = 4 + 4 + 2 + 1 = 11 
结果 = 32 - 11 = 21
 

提示：

1 <= n <= 10^5

解：
转字符串遍历

```py
class Solution:
    def subtractProductAndSum(self, n: int) -> int:
        s = 0
        j = 1
        for _n in str(n):
            i_n = int(_n)
            s += i_n
            j *= i_n
        return j - s
```
---


1281. 整数的各位积和之差    --2
给你一个整数 n，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。

 

示例 1：

输入：n = 234
输出：15 
解释：
各位数之积 = 2 * 3 * 4 = 24 
各位数之和 = 2 + 3 + 4 = 9 
结果 = 24 - 9 = 15
示例 2：

输入：n = 4421
输出：21
解释： 
各位数之积 = 4 * 4 * 2 * 1 = 32 
各位数之和 = 4 + 4 + 2 + 1 = 11 
结果 = 32 - 11 = 21
 

提示：

1 <= n <= 10^5

解：
转字符串遍历 ,简便

```py
class Solution:
    def subtractProductAndSum(self, n: int) -> int:
        nums=list(map(int,str(n)))
        return math.prod(nums)-sum(nums)
```
---


1281. 整数的各位积和之差    --3
给你一个整数 n，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。

 

示例 1：

输入：n = 234
输出：15 
解释：
各位数之积 = 2 * 3 * 4 = 24 
各位数之和 = 2 + 3 + 4 = 9 
结果 = 24 - 9 = 15
示例 2：

输入：n = 4421
输出：21
解释： 
各位数之积 = 4 * 4 * 2 * 1 = 32 
各位数之和 = 4 + 4 + 2 + 1 = 11 
结果 = 32 - 11 = 21
 

提示：

1 <= n <= 10^5

解：
使用取余

```py
class Solution:
    def subtractProductAndSum(self, n: int) -> int:
        a, b = 1, 0
        while (n>0):
            a *= (n % 10)
            b += (n % 10)
            n  = n // 10
        return a - b
```
---

1281. 整数的各位积和之差    --4
给你一个整数 n，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。

 

示例 1：

输入：n = 234
输出：15 
解释：
各位数之积 = 2 * 3 * 4 = 24 
各位数之和 = 2 + 3 + 4 = 9 
结果 = 24 - 9 = 15
示例 2：

输入：n = 4421
输出：21
解释： 
各位数之积 = 4 * 4 * 2 * 1 = 32 
各位数之和 = 4 + 4 + 2 + 1 = 11 
结果 = 32 - 11 = 21
 

提示：

1 <= n <= 10^5

解：
转字符串 lisp 版

```lisp
#lang racket
(define (subtractProductAndSum n)
  (define x (map (lambda (i) (- i 48)) (map char->integer (string->list (number->string n)))))
  (- (for/product ([i x]) i) (for/sum ([i x]) i)))
```
---

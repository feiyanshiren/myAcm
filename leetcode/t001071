1071. 字符串的最大公因子

对于字符串 S 和 T，只有在 S = T + ... + T（T 与自身连接 1 次或多次）时，我们才认定 “T 能除尽 S”。

返回最长字符串 X，要求满足 X 能除尽 str1 且 X 能除尽 str2。

 

示例 1：

输入：str1 = "ABCABC", str2 = "ABC"
输出："ABC"

示例 2：

输入：str1 = "ABABAB", str2 = "ABAB"
输出："AB"

示例 3：

输入：str1 = "LEET", str2 = "CODE"
输出：""

 

提示：

    1 <= str1.length <= 1000
    1 <= str2.length <= 1000
    str1[i] 和 str2[i] 为大写英文字母

解：
先找最小的，在循环替换 注意是最大公因数，循环要反起来
```py
class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        s = ""
        k = ""
        if len(str1) <= len(str2):
            s = str1
            k = str2
        else:
            s = str2
            k = str1
        a = ""
        l = len(s)
        for i in range(l):
            a = s[:l - i]
            if s.replace(a, "") == "":
                if k.replace(a, "") == "":
                    return a
        # print(a)
        return ""
```
---


1071. 字符串的最大公因子    --2

对于字符串 S 和 T，只有在 S = T + ... + T（T 与自身连接 1 次或多次）时，我们才认定 “T 能除尽 S”。

返回最长字符串 X，要求满足 X 能除尽 str1 且 X 能除尽 str2。

 

示例 1：

输入：str1 = "ABCABC", str2 = "ABC"
输出："ABC"

示例 2：

输入：str1 = "ABABAB", str2 = "ABAB"
输出："AB"

示例 3：

输入：str1 = "LEET", str2 = "CODE"
输出：""

 

提示：

    1 <= str1.length <= 1000
    1 <= str2.length <= 1000
    str1[i] 和 str2[i] 为大写英文字母

解：
如果它们有公因子 abc，那么 str1 就是 mmm 个 abc 的重复，str2 是 nnn 个 abc 的重复，连起来就是 m+nm+nm+n 个 abc，好像 m+nm+nm+n 个 abc 跟 n+mn+mn+m 个 abc 是一样的。

所以如果 str1 + str2 === str2 + str1 就意味着有解。

我们也很容易想到 str1 + str2 !== str2 + str1 也是无解的充要条件

go 版本 双百
```go
func gcdOfStrings(str1 string, str2 string) string {
    if str1 + str2 != str2 + str1{
        return ""
    }else{
        return str1[:gcd(len(str1), len(str2))]
    }
}

func gcd(x,y int) int{
     for y != 0  {     
            x, y = y, x%y 
      }  
    return x
}
```
---

2595. 奇偶位数
提示
简单
7
相关企业

给你一个 正 整数 n 。

用 even 表示在 n 的二进制形式（下标从 0 开始）中值为 1 的偶数下标的个数。

用 odd 表示在 n 的二进制形式（下标从 0 开始）中值为 1 的奇数下标的个数。

返回整数数组 answer ，其中 answer = [even, odd] 。

 

示例 1：

输入：n = 17
输出：[2,0]
解释：17 的二进制形式是 10001 。 
下标 0 和 下标 4 对应的值为 1 。 
共有 2 个偶数下标，0 个奇数下标。

示例 2：

输入：n = 2
输出：[0,1]
解释：2 的二进制形式是 10 。 
下标 1 对应的值为 1 。 
共有 0 个偶数下标，1 个奇数下标。

 

提示：

    1 <= n <= 1000

解：
使用 bin 转换

```py
class Solution:
    def evenOddBit(self, n: int) -> List[int]:
        even = 0
        odd = 0
        bn = bin(n)[2:][::-1]
        for i, v in enumerate(bn):
            if v == "1":
                if i % 2 == 0:
                    even += 1
                else:
                    odd += 1
        return [even, odd]
```

---


2595. 奇偶位数    --2
提示
简单
7
相关企业

给你一个 正 整数 n 。

用 even 表示在 n 的二进制形式（下标从 0 开始）中值为 1 的偶数下标的个数。

用 odd 表示在 n 的二进制形式（下标从 0 开始）中值为 1 的奇数下标的个数。

返回整数数组 answer ，其中 answer = [even, odd] 。

 

示例 1：

输入：n = 17
输出：[2,0]
解释：17 的二进制形式是 10001 。 
下标 0 和 下标 4 对应的值为 1 。 
共有 2 个偶数下标，0 个奇数下标。

示例 2：

输入：n = 2
输出：[0,1]
解释：2 的二进制形式是 10 。 
下标 1 对应的值为 1 。 
共有 0 个偶数下标，1 个奇数下标。

 

提示：

    1 <= n <= 1000

解：
使用 FormatInt 转换

```go
func evenOddBit(n int) []int {
	even := 0
	odd := 0
	bn := strconv.FormatInt(int64(n), 2)
	arr := []byte(bn)
	for i, j := 0, len(bn)-1; i < j; i, j = i+1, j-1 {
		arr[i], arr[j] = arr[j], arr[i]
	}
	for i, v := range arr {
		if v == '1' {
			if i%2 == 0 {
				even++
			} else {
				odd++
			}
		}
	}
	return []int{even, odd}
}
```

---
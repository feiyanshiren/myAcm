993. 二叉树的堂兄弟节点

在二叉树中，根节点位于深度 0 处，每个深度为 k 的节点的子节点位于深度 k+1 处。

如果二叉树的两个节点深度相同，但父节点不同，则它们是一对堂兄弟节点。

我们给出了具有唯一值的二叉树的根节点 root，以及树中两个不同节点的值 x 和 y。

只有与值 x 和 y 对应的节点是堂兄弟节点时，才返回 true。否则，返回 false。

 

示例 1：

输入：root = [1,2,3,4], x = 4, y = 3
输出：false

示例 2：

输入：root = [1,2,3,null,4,null,5], x = 5, y = 4
输出：true

示例 3：

输入：root = [1,2,3,null,4], x = 2, y = 3
输出：false

 

提示：

    二叉树的节点数介于 2 到 100 之间。
    每个节点的值都是唯一的、范围为 1 到 100 的整数。
	
解：
递归。分别查询x和y的父值和深度再比较。

```py
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:
        def find(node, x, fa, dp):
            if not node:
                return 0, dp
            if node.val == x:
                return fa, dp
            else:
                a1, b1 = find(node.left, x, node.val, dp + 1)
                if a1 == 0:
                    a1, b1 = find(node.right, x, node.val, dp + 1)
                return a1, b1
        a1, b1 = find(root, x, root.val, 0)
        a2, b2 = find(root, y, root.val, 0)
        # print(a1, b1, a2, b2)
        if b1 == b2 and a1 != a2:
            return True
        else:
            return False
```
---


993. 二叉树的堂兄弟节点    --2
 
在二叉树中，根节点位于深度 0 处，每个深度为 k 的节点的子节点位于深度 k+1 处。

如果二叉树的两个节点深度相同，但父节点不同，则它们是一对堂兄弟节点。

我们给出了具有唯一值的二叉树的根节点 root，以及树中两个不同节点的值 x 和 y。

只有与值 x 和 y 对应的节点是堂兄弟节点时，才返回 true。否则，返回 false。

 

示例 1：

输入：root = [1,2,3,4], x = 4, y = 3
输出：false

示例 2：

输入：root = [1,2,3,null,4,null,5], x = 5, y = 4
输出：true

示例 3：

输入：root = [1,2,3,null,4], x = 2, y = 3
输出：false

 

提示：

    二叉树的节点数介于 2 到 100 之间。
    每个节点的值都是唯一的、范围为 1 到 100 的整数。
	
解：
递归。不需要分别查找，遍历一遍就行了，存map。

```py
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:
        self.m = {}
        def find(node, fa, dp):
            if not node:
                return
            else:
                self.m[node.val] = [fa, dp]
                find(node.left, node.val, dp + 1)
                find(node.right, node.val, dp + 1)
        find(root, 0, 0)
        # print(self.m)
        if self.m[x][0] != self.m[y][0] and self.m[x][1] == self.m[y][1]:
            return True
        else:
            return False
```
---
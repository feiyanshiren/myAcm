2643. 一最多的行
提示
简单
6
相关企业

给你一个大小为 m x n 的二进制矩阵 mat ，请你找出包含最多 1 的行的下标（从 0 开始）以及这一行中 1 的数目。

如果有多行包含最多的 1 ，只需要选择 行下标最小 的那一行。

返回一个由行下标和该行中 1 的数量组成的数组。

 

示例 1：

输入：mat = [[0,1],[1,0]]
输出：[0,1]
解释：两行中 1 的数量相同。所以返回下标最小的行，下标为 0 。该行 1 的数量为 1 。所以，答案为 [0,1] 。 

示例 2：

输入：mat = [[0,0,0],[0,1,1]]
输出：[1,2]
解释：下标为 1 的行中 1 的数量最多。该行 1 的数量为 2 。所以，答案为 [1,2] 。

示例 3：

输入：mat = [[0,0],[1,1],[0,0]]
输出：[1,2]
解释：下标为 1 的行中 1 的数量最多。该行 1 的数量为 2 。所以，答案为 [1,2] 。

 

提示：

    m == mat.length 
    n == mat[i].length 
    1 <= m, n <= 100 
    mat[i][j] 为 0 或 1


解:
使用map 排序
97+
```py
class Solution:
    def rowAndMaximumOnes(self, mat: List[List[int]]) -> List[int]:
        res = {}
        for i in range(len(mat)):
            res[i] = mat[i].count(1)
        re = sorted(res.items(), key=lambda x: x[1], reverse=True)
        return list(re[0])
```

---


2643. 一最多的行    --2
提示
简单
6
相关企业

给你一个大小为 m x n 的二进制矩阵 mat ，请你找出包含最多 1 的行的下标（从 0 开始）以及这一行中 1 的数目。

如果有多行包含最多的 1 ，只需要选择 行下标最小 的那一行。

返回一个由行下标和该行中 1 的数量组成的数组。

 

示例 1：

输入：mat = [[0,1],[1,0]]
输出：[0,1]
解释：两行中 1 的数量相同。所以返回下标最小的行，下标为 0 。该行 1 的数量为 1 。所以，答案为 [0,1] 。 

示例 2：

输入：mat = [[0,0,0],[0,1,1]]
输出：[1,2]
解释：下标为 1 的行中 1 的数量最多。该行 1 的数量为 2 。所以，答案为 [1,2] 。

示例 3：

输入：mat = [[0,0],[1,1],[0,0]]
输出：[1,2]
解释：下标为 1 的行中 1 的数量最多。该行 1 的数量为 2 。所以，答案为 [1,2] 。

 

提示：

    m == mat.length 
    n == mat[i].length 
    1 <= m, n <= 100 
    mat[i][j] 为 0 或 1


解:
使用map 排序, 改一下就是一行了
```py
def rowAndMaximumOnes(self, mat: List[List[int]]) -> List[int]:
        return list(sorted({i: mat[i].count(1) for i in range(len(mat))}.items(), key=lambda x: x[1], reverse=True)[0])
```

---


2643. 一最多的行    --3
提示
简单
6
相关企业

给你一个大小为 m x n 的二进制矩阵 mat ，请你找出包含最多 1 的行的下标（从 0 开始）以及这一行中 1 的数目。

如果有多行包含最多的 1 ，只需要选择 行下标最小 的那一行。

返回一个由行下标和该行中 1 的数量组成的数组。

 

示例 1：

输入：mat = [[0,1],[1,0]]
输出：[0,1]
解释：两行中 1 的数量相同。所以返回下标最小的行，下标为 0 。该行 1 的数量为 1 。所以，答案为 [0,1] 。 

示例 2：

输入：mat = [[0,0,0],[0,1,1]]
输出：[1,2]
解释：下标为 1 的行中 1 的数量最多。该行 1 的数量为 2 。所以，答案为 [1,2] 。

示例 3：

输入：mat = [[0,0],[1,1],[0,0]]
输出：[1,2]
解释：下标为 1 的行中 1 的数量最多。该行 1 的数量为 2 。所以，答案为 [1,2] 。

 

提示：

    m == mat.length 
    n == mat[i].length 
    1 <= m, n <= 100 
    mat[i][j] 为 0 或 1


解:
不使用map 排序
```py
def rowAndMaximumOnes(self, mat: List[List[int]]) -> List[int]:
        res = [0, 0]
        for i in range(len(mat)):
            c = mat[i].count(1)
            if c > res[1]:
                res[1] = c
                res[0] = i
        return res
```

---


2643. 一最多的行    --4
提示
简单
6
相关企业

给你一个大小为 m x n 的二进制矩阵 mat ，请你找出包含最多 1 的行的下标（从 0 开始）以及这一行中 1 的数目。

如果有多行包含最多的 1 ，只需要选择 行下标最小 的那一行。

返回一个由行下标和该行中 1 的数量组成的数组。

 

示例 1：

输入：mat = [[0,1],[1,0]]
输出：[0,1]
解释：两行中 1 的数量相同。所以返回下标最小的行，下标为 0 。该行 1 的数量为 1 。所以，答案为 [0,1] 。 

示例 2：

输入：mat = [[0,0,0],[0,1,1]]
输出：[1,2]
解释：下标为 1 的行中 1 的数量最多。该行 1 的数量为 2 。所以，答案为 [1,2] 。

示例 3：

输入：mat = [[0,0],[1,1],[0,0]]
输出：[1,2]
解释：下标为 1 的行中 1 的数量最多。该行 1 的数量为 2 。所以，答案为 [1,2] 。

 

提示：

    m == mat.length 
    n == mat[i].length 
    1 <= m, n <= 100 
    mat[i][j] 为 0 或 1


解:
不使用map 排序,奇怪 比python 慢
```go
func rowAndMaximumOnes(mat [][]int) []int {
	res := []int{0, 0}
	for i := 0; i < len(mat); i++ {
		c := 0
		for _, v := range mat[i] {
			if v == 1 {
				c += 1
			}
		}
		if c > res[1] {
			res[1] = c
			res[0] = i
		}
	}
	return res
}
```

---
228. 汇总区间

给定一个无重复元素的有序整数数组 nums 。

返回 恰好覆盖数组中所有数字 的 最小有序 区间范围列表。也就是说，nums 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 nums 的数字 x 。

列表中的每个区间范围 [a,b] 应该按如下格式输出：

    "a->b" ，如果 a != b
    "a" ，如果 a == b

 

示例 1：

输入：nums = [0,1,2,4,5,7]
输出：["0->2","4->5","7"]
解释：区间范围是：
[0,2] --> "0->2"
[4,5] --> "4->5"
[7,7] --> "7"

示例 2：

输入：nums = [0,2,3,4,6,8,9]
输出：["0","2->4","6","8->9"]
解释：区间范围是：
[0,0] --> "0"
[2,4] --> "2->4"
[6,6] --> "6"
[8,9] --> "8->9"

示例 3：

输入：nums = []
输出：[]

示例 4：

输入：nums = [-1]
输出：["-1"]

示例 5：

输入：nums = [0]
输出：["0"]

 

提示：

    0 <= nums.length <= 20
    -231 <= nums[i] <= 231 - 1
    nums 中的所有值都 互不相同
    nums 按升序排列

解：
一次循环，注意细节然后最后处理情况 93+

```py
class Solution:
    def summaryRanges(self, nums: List[int]) -> List[str]:
        res = []
        t_list = []
        for i in nums:
            if t_list:
                j = t_list[-1]
                if j + 1 == i:
                    t_list.append(i)
                else:
                    if len(t_list) == 1:
                        res.append(str(t_list[0]))
                    else:
                        res.append(str(t_list[0]) + "->" + str(t_list[-1]))
                    t_list = [i]
            else:
                t_list.append(i)
        if len(t_list) == 1:
            res.append(str(t_list[0]))
        elif len(t_list) > 1:
            res.append(str(t_list[0]) + "->" + str(t_list[-1]))
        return res
```
---



228. 汇总区间    --2

给定一个无重复元素的有序整数数组 nums 。

返回 恰好覆盖数组中所有数字 的 最小有序 区间范围列表。也就是说，nums 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 nums 的数字 x 。

列表中的每个区间范围 [a,b] 应该按如下格式输出：

    "a->b" ，如果 a != b
    "a" ，如果 a == b

 

示例 1：

输入：nums = [0,1,2,4,5,7]
输出：["0->2","4->5","7"]
解释：区间范围是：
[0,2] --> "0->2"
[4,5] --> "4->5"
[7,7] --> "7"

示例 2：

输入：nums = [0,2,3,4,6,8,9]
输出：["0","2->4","6","8->9"]
解释：区间范围是：
[0,0] --> "0"
[2,4] --> "2->4"
[6,6] --> "6"
[8,9] --> "8->9"

示例 3：

输入：nums = []
输出：[]

示例 4：

输入：nums = [-1]
输出：["-1"]

示例 5：

输入：nums = [0]
输出：["0"]

 

提示：

    0 <= nums.length <= 20
    -231 <= nums[i] <= 231 - 1
    nums 中的所有值都 互不相同
    nums 按升序排列

解：
一次循环，用一个临时数组,末尾添加一个数就可以不另外处理最后的问题了。

```py
class Solution:
    def summaryRanges(self, nums: List[int]) -> List[str]:
        if nums:
            nums.append(nums[-1] + 2)
        res = []
        t_list = []
        for i in nums:
            if t_list:
                if t_list[-1] + 1 == i:
                    t_list.append(i)
                else:
                    res.append(str(t_list[0])) if len(t_list) == 1 else res.append(str(t_list[0]) + "->" + str(t_list[-1]))                        
                    t_list = [i]
            else:
                t_list.append(i)
        return res
```
---


228. 汇总区间    --3

给定一个无重复元素的有序整数数组 nums 。

返回 恰好覆盖数组中所有数字 的 最小有序 区间范围列表。也就是说，nums 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 nums 的数字 x 。

列表中的每个区间范围 [a,b] 应该按如下格式输出：

    "a->b" ，如果 a != b
    "a" ，如果 a == b

 

示例 1：

输入：nums = [0,1,2,4,5,7]
输出：["0->2","4->5","7"]
解释：区间范围是：
[0,2] --> "0->2"
[4,5] --> "4->5"
[7,7] --> "7"

示例 2：

输入：nums = [0,2,3,4,6,8,9]
输出：["0","2->4","6","8->9"]
解释：区间范围是：
[0,0] --> "0"
[2,4] --> "2->4"
[6,6] --> "6"
[8,9] --> "8->9"

示例 3：

输入：nums = []
输出：[]

示例 4：

输入：nums = [-1]
输出：["-1"]

示例 5：

输入：nums = [0]
输出：["0"]

 

提示：

    0 <= nums.length <= 20
    -231 <= nums[i] <= 231 - 1
    nums 中的所有值都 互不相同
    nums 按升序排列

解：
一次循环，不用临时数组,使用两个变量start和end，末尾添加一个数就可以不另外处理最后的问题了。

```py
class Solution:
    def summaryRanges(self, nums: List[int]) -> List[str]:
        nums.append(-2 ** 31 - 1)
        res = []
        start = nums[0]
        end = nums[0]
        for i in range(1, len(nums)):
            if nums[i] != end + 1:
                res.append(str(start)) if start == end else res.append(str(start) + "->" + str(end))
                start = nums[i]
            end = nums[i]
        return res
```
---


228. 汇总区间    --4

给定一个无重复元素的有序整数数组 nums 。

返回 恰好覆盖数组中所有数字 的 最小有序 区间范围列表。也就是说，nums 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 nums 的数字 x 。

列表中的每个区间范围 [a,b] 应该按如下格式输出：

    "a->b" ，如果 a != b
    "a" ，如果 a == b

 

示例 1：

输入：nums = [0,1,2,4,5,7]
输出：["0->2","4->5","7"]
解释：区间范围是：
[0,2] --> "0->2"
[4,5] --> "4->5"
[7,7] --> "7"

示例 2：

输入：nums = [0,2,3,4,6,8,9]
输出：["0","2->4","6","8->9"]
解释：区间范围是：
[0,0] --> "0"
[2,4] --> "2->4"
[6,6] --> "6"
[8,9] --> "8->9"

示例 3：

输入：nums = []
输出：[]

示例 4：

输入：nums = [-1]
输出：["-1"]

示例 5：

输入：nums = [0]
输出：["0"]

 

提示：

    0 <= nums.length <= 20
    -231 <= nums[i] <= 231 - 1
    nums 中的所有值都 互不相同
    nums 按升序排列

解：
一次循环，不用临时数组,使用两个变量start和end，末尾添加一个数就可以不另外处理最后的问题了。
100+, 100+
```go
func summaryRanges(nums []int) []string {
    nums = append(nums, -2 ^ 31 - 1)
    res := make([]string, 0)
    start := nums[0]
    end := nums[0]
    for i := 1; i < len(nums); i++{
        if nums[i] != end + 1{
            if start == end{
                res = append(res, strconv.Itoa(start))
            }else{
                res = append(res, strconv.Itoa(start) + "->" + strconv.Itoa(end))
            }
            start = nums[i]
        }
        end = nums[i]
    }
    return res
}
```
---
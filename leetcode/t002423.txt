2423. 删除字符使频率相同
给你一个下标从 0 开始的字符串 word ，字符串只包含小写英文字母。你需要选择 一个 下标并 删除 下标处的字符，使得 word 中剩余每个字母出现 频率 相同。

如果删除一个字母后，word 中剩余所有字母的出现频率都相同，那么返回 true ，否则返回 false 。

注意：

字母 x 的 频率 是这个字母在字符串中出现的次数。
你 必须 恰好删除一个字母，不能一个字母都不删除。
 

示例 1：

输入：word = "abcc"
输出：true
解释：选择下标 3 并删除该字母，word 变成 "abc" 且每个字母出现频率都为 1 。
示例 2：

输入：word = "aazz"
输出：false
解释：我们必须删除一个字母，所以要么 "a" 的频率变为 1 且 "z" 的频率为 2 ，要么两个字母频率反过来。所以不可能让剩余所有字母出现频率相同。
 

提示：

2 <= word.length <= 100
word 只包含小写英文字母。


解：
暴力，每个统计 注意reduce用法
```py
class Solution:
    def equalFrequency(self, word: str) -> bool:
        for i in range(len(word)):
            s = word[:i] + word[i+1:]
            count_word = Counter(s)
            k = reduce(lambda x, y: x if x == y else 0, count_word.values())
            if k != 0:
                return True
        return False
```
---



2423. 删除字符使频率相同    --2
给你一个下标从 0 开始的字符串 word ，字符串只包含小写英文字母。你需要选择 一个 下标并 删除 下标处的字符，使得 word 中剩余每个字母出现 频率 相同。

如果删除一个字母后，word 中剩余所有字母的出现频率都相同，那么返回 true ，否则返回 false 。

注意：

字母 x 的 频率 是这个字母在字符串中出现的次数。
你 必须 恰好删除一个字母，不能一个字母都不删除。
 

示例 1：

输入：word = "abcc"
输出：true
解释：选择下标 3 并删除该字母，word 变成 "abc" 且每个字母出现频率都为 1 。
示例 2：

输入：word = "aazz"
输出：false
解释：我们必须删除一个字母，所以要么 "a" 的频率变为 1 且 "z" 的频率为 2 ，要么两个字母频率反过来。所以不可能让剩余所有字母出现频率相同。
 

提示：

2 <= word.length <= 100
word 只包含小写英文字母。


解：
```py

相信大部分人刚拿到这个题，做法都是遍历字符串1次，统计每个字母的出现频率，然后验证是否满足题目条件。但满足题目条件的情况有多种，如果考虑不够细致，极其容易WA：

有一种字母出现k+1次，其他字母都出现k次。这是最明显的情况。
有一种字母只出现了1次，其他字母都出现了k次，注意k可以等于1，如果k>1，删掉那个不合群的字母，剩下的就满足题意了，如果k=1，删掉任意一个字母都能满足题意。
整个串全部由同一种字母组成，既然只有1种字母，那自然频率都相同，删不删都是如此。
这是这道题的标准做法，这里给出对各个字母的出现频率进行排序的代码实现。


class Solution:
    def equalFrequency(self, word: str) -> bool:

        cnt = defaultdict(int)
        for ch in word:
            cnt[ch]+=1
        cnt = sorted(cnt.values())

        return len(cnt)==1 or (cnt[0]==1 and cnt[1]==cnt[-1]) or cnt[0]==cnt[-2]==cnt[-1]-1

```
---
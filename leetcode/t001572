1572. 矩阵对角线元素的和

给你一个正方形矩阵 mat，请你返回矩阵对角线元素的和。

请你返回在矩阵主对角线上的元素和副对角线上且不在主对角线上元素的和。

 

示例  1：

输入：mat = [[1,2,3],
            [4,5,6],
            [7,8,9]]
输出：25
解释：对角线的和为：1 + 5 + 9 + 3 + 7 = 25
请注意，元素 mat[1][1] = 5 只会被计算一次。

示例  2：

输入：mat = [[1,1,1,1],
            [1,1,1,1],
            [1,1,1,1],
            [1,1,1,1]]
输出：8

示例 3：

输入：mat = [[5]]
输出：5

 

提示：

    n == mat.length == mat[i].length
    1 <= n <= 100
    1 <= mat[i][j] <= 100



解
暴力
```py
class Solution:
    def diagonalSum(self, mat: List[List[int]]) -> int:
        n = len(mat)
        res = 0
        for i in range(n):
            res += mat[i][i]
            res += mat[n - 1 - i][i]
        if n % 2 == 1:
            res -= mat[n // 2][n // 2]
        return res
```
---


1572. 矩阵对角线元素的和    --2

给你一个正方形矩阵 mat，请你返回矩阵对角线元素的和。

请你返回在矩阵主对角线上的元素和副对角线上且不在主对角线上元素的和。

 

示例  1：

输入：mat = [[1,2,3],
            [4,5,6],
            [7,8,9]]
输出：25
解释：对角线的和为：1 + 5 + 9 + 3 + 7 = 25
请注意，元素 mat[1][1] = 5 只会被计算一次。

示例  2：

输入：mat = [[1,1,1,1],
            [1,1,1,1],
            [1,1,1,1],
            [1,1,1,1]]
输出：8

示例 3：

输入：mat = [[5]]
输出：5

 

提示：

    n == mat.length == mat[i].length
    1 <= n <= 100
    1 <= mat[i][j] <= 100



解
把非对角线的全部置零。numpy
```py


class Solution:
    def diagonalSum(self, mat: List[List[int]]) -> int:
        import numpy as np
        mat = np.array(mat)
        for i in range(mat.shape[0]):
            for j in range(mat.shape[1]):
                if i != j and i + j + 1 != mat.shape[0]:
                    mat[i, j] = 0
        return int(np.sum(mat))
```
---

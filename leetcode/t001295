1295. 统计位数为偶数的数字
给你一个整数数组 nums，请你返回其中位数为 偶数 的数字的个数。

 

示例 1：

输入：nums = [12,345,2,6,7896]
输出：2
解释：
12 是 2 位数字（位数为偶数） 
345 是 3 位数字（位数为奇数）  
2 是 1 位数字（位数为奇数） 
6 是 1 位数字 位数为奇数） 
7896 是 4 位数字（位数为偶数）  
因此只有 12 和 7896 是位数为偶数的数字
示例 2：

输入：nums = [555,901,482,1771]
输出：1 
解释： 
只有 1771 是位数为偶数的数字。
 

提示：

1 <= nums.length <= 500
1 <= nums[i] <= 10^5

解:
使用推导式

```py
class Solution:
    def findNumbers(self, nums: List[int]) -> int:
        return sum([1 if len(str(i)) % 2 == 0 else 0 for i in nums])
```

---


1295. 统计位数为偶数的数字    --2
给你一个整数数组 nums，请你返回其中位数为 偶数 的数字的个数。

 

示例 1：

输入：nums = [12,345,2,6,7896]
输出：2
解释：
12 是 2 位数字（位数为偶数） 
345 是 3 位数字（位数为奇数）  
2 是 1 位数字（位数为奇数） 
6 是 1 位数字 位数为奇数） 
7896 是 4 位数字（位数为偶数）  
因此只有 12 和 7896 是位数为偶数的数字
示例 2：

输入：nums = [555,901,482,1771]
输出：1 
解释： 
只有 1771 是位数为偶数的数字。
 

提示：

1 <= nums.length <= 500
1 <= nums[i] <= 10^5

解:
使用log 求位数

```py
from math import log10


class Solution:
    def findNumbers(self, nums: List[int]) -> int:
        if not nums:
            return 0
        
        cnt = 0
        for x in nums:
            if int(log10(x)+1)%2 == 0:
                cnt += 1
        return cnt
    
    # log10(n)，表示以10为底n的对数
    # log10(10)    1.0
    # log10(100)   2.0
    # log10(9100)  3.9590413923210934
    
    # 刚好可以用这个求出数字的位数
```

---


1295. 统计位数为偶数的数字    --3
给你一个整数数组 nums，请你返回其中位数为 偶数 的数字的个数。

 

示例 1：

输入：nums = [12,345,2,6,7896]
输出：2
解释：
12 是 2 位数字（位数为偶数） 
345 是 3 位数字（位数为奇数）  
2 是 1 位数字（位数为奇数） 
6 是 1 位数字 位数为奇数） 
7896 是 4 位数字（位数为偶数）  
因此只有 12 和 7896 是位数为偶数的数字
示例 2：

输入：nums = [555,901,482,1771]
输出：1 
解释： 
只有 1771 是位数为偶数的数字。
 

提示：

1 <= nums.length <= 500
1 <= nums[i] <= 10^5

解:
转字符串，用haskell

```haskell
findNumbers x = sum [if even (length (show i)) then 1 else 0 | i <- x]
```

---

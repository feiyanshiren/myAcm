1496. 判断路径是否相交
给你一个字符串 path，其中 path[i] 的值可以是 'N'、'S'、'E' 或者 'W'，分别表示向北、向南、向东、向西移动一个单位。

机器人从二维平面上的原点 (0, 0) 处开始出发，按 path 所指示的路径行走。

如果路径在任何位置上出现相交的情况，也就是走到之前已经走过的位置，请返回 True ；否则，返回 False 。

 

示例 1：



输入：path = "NES"
输出：false 
解释：该路径没有在任何位置相交。
示例 2：



输入：path = "NESWW"
输出：true
解释：该路径经过原点两次。
 

提示：

1 <= path.length <= 10^4
path 仅由 {'N', 'S', 'E', 'W} 中的字符组成

解：
模拟，注意的是新键数组注意不要是引用 83+

```py
class Solution:
    def isPathCrossing(self, path: str) -> bool:
        list_dir = [[0, 0]]
        for i in path:
            t_dir = [list_dir[-1][0], list_dir[-1][1]]
            if i == "N":
                t_dir[1] += 1
            elif i == "S":
                t_dir[1] -= 1
            elif i == "E":
                t_dir[0] += 1
            else:
                t_dir[0] -= 1
            if t_dir in list_dir:
                return True
            else:
                list_dir.append(t_dir)
        return False
```
---


1496. 判断路径是否相交    --2
给你一个字符串 path，其中 path[i] 的值可以是 'N'、'S'、'E' 或者 'W'，分别表示向北、向南、向东、向西移动一个单位。

机器人从二维平面上的原点 (0, 0) 处开始出发，按 path 所指示的路径行走。

如果路径在任何位置上出现相交的情况，也就是走到之前已经走过的位置，请返回 True ；否则，返回 False 。

 

示例 1：



输入：path = "NES"
输出：false 
解释：该路径没有在任何位置相交。
示例 2：



输入：path = "NESWW"
输出：true
解释：该路径经过原点两次。
 

提示：

1 <= path.length <= 10^4
path 仅由 {'N', 'S', 'E', 'W} 中的字符组成

解：
优化情况，然后不使用数组，使用4个计数

```java
class Solution {
    public boolean isPathCrossing(String path) {
        if(path.contains("NS")||path.contains("SN")||path.contains("EW")||path.contains("WE"))
            return true;
        char[] pat = path.toCharArray();
        int N = 0;
        int S = 0;
        int E = 0;
        int W = 0;
        for(int i=0; i<pat.length; i++){
            switch(pat[i]){
                case 'N':
                    N++;
                    break;
                case 'S':
                    S++;
                    break;
                case 'E':
                    E++;
                    break;
                case 'W':
                    W++;
                    break;
            }
            if(N==S && E==W) 
                return true;
        }
        return false;
    }
}
```
---

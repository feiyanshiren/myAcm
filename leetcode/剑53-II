剑指 Offer 53 - II. 0～n-1中缺失的数字
一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。

 

示例 1:

输入: [0,1,3]
输出: 2
示例 2:

输入: [0,1,2,3,4,5,6,7,9]
输出: 8
 

限制：

1 <= 数组长度 <= 10000

解：顺序查，注意都有的情况需要返回最后的
```py

class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        l = len(nums)
        for i in range(l):
            if i != nums[i]:
                return i
        return l
```

---


剑指 Offer 53 - II. 0～n-1中缺失的数字    --2
一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。

 

示例 1:

输入: [0,1,3]
输出: 2
示例 2:

输入: [0,1,2,3,4,5,6,7,9]
输出: 8
 

限制：

1 <= 数组长度 <= 10000

解：二分法，居然比顺序慢
```py

class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        l = len(nums)
        s = 0
        e = l // 2
        while s != e:
            if e == nums[e]:
                s = e
                e = (l - s) // 2 + s
            else:
                e = (e - s) // 2 + s
        if e != nums[e]:
            return e
        else:
            return e + 1
```

---


剑指 Offer 53 - II. 0～n-1中缺失的数字    --3
一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。

 

示例 1:

输入: [0,1,3]
输出: 2
示例 2:

输入: [0,1,2,3,4,5,6,7,9]
输出: 8
 

限制：

1 <= 数组长度 <= 10000

解：二分法，go
```go

func missingNumber(nums []int) int {
    l := len(nums)
    s := 0
    e := l / 2
    for s != e{
        if e == nums[e]{
            s = e
            e = (l - s) / 2 + s
        }else{
            e = (e - s) / 2 + s
        }
    }
    if e != nums[e]{
        return e
    }else{
        return e + 1
    }
}
```

---

1909. 删除一个元素使数组严格递增

给你一个下标从 0 开始的整数数组 nums ，如果 恰好 删除 一个 元素后，数组 严格递增 ，那么请你返回 true ，否则返回 false 。如果数组本身已经是严格递增的，请你也返回 true 。

数组 nums 是 严格递增 的定义为：对于任意下标的 1 <= i < nums.length 都满足 nums[i - 1] < nums[i] 。

 

示例 1：

输入：nums = [1,2,10,5,7]
输出：true
解释：从 nums 中删除下标 2 处的 10 ，得到 [1,2,5,7] 。
[1,2,5,7] 是严格递增的，所以返回 true 。

示例 2：

输入：nums = [2,3,1,2]
输出：false
解释：
[3,1,2] 是删除下标 0 处元素后得到的结果。
[2,1,2] 是删除下标 1 处元素后得到的结果。
[2,3,2] 是删除下标 2 处元素后得到的结果。
[2,3,1] 是删除下标 3 处元素后得到的结果。
没有任何结果数组是严格递增的，所以返回 false 。

示例 3：

输入：nums = [1,1,1]
输出：false
解释：删除任意元素后的结果都是 [1,1] 。
[1,1] 不是严格递增的，所以返回 false 。

示例 4：

输入：nums = [1,2,3]
输出：true
解释：[1,2,3] 已经是严格递增的，所以返回 true 。

 

提示：

    2 <= nums.length <= 1000
    1 <= nums[i] <= 1000


解：
暴力法，居然没超时

```py
class Solution:
    def canBeIncreasing(self, nums: List[int]) -> bool:
        def if_ok(n: List[int]) -> bool:
            for i in range(1, len(n)):
                if n[i - 1] >= n[i]:
                    return False
            return True

        for i in range(len(nums)):
            if if_ok(nums[:i] + nums[i + 1:]):
                return True
        return False
```
---


1909. 删除一个元素使数组严格递增    --2

给你一个下标从 0 开始的整数数组 nums ，如果 恰好 删除 一个 元素后，数组 严格递增 ，那么请你返回 true ，否则返回 false 。如果数组本身已经是严格递增的，请你也返回 true 。

数组 nums 是 严格递增 的定义为：对于任意下标的 1 <= i < nums.length 都满足 nums[i - 1] < nums[i] 。

 

示例 1：

输入：nums = [1,2,10,5,7]
输出：true
解释：从 nums 中删除下标 2 处的 10 ，得到 [1,2,5,7] 。
[1,2,5,7] 是严格递增的，所以返回 true 。

示例 2：

输入：nums = [2,3,1,2]
输出：false
解释：
[3,1,2] 是删除下标 0 处元素后得到的结果。
[2,1,2] 是删除下标 1 处元素后得到的结果。
[2,3,2] 是删除下标 2 处元素后得到的结果。
[2,3,1] 是删除下标 3 处元素后得到的结果。
没有任何结果数组是严格递增的，所以返回 false 。

示例 3：

输入：nums = [1,1,1]
输出：false
解释：删除任意元素后的结果都是 [1,1] 。
[1,1] 不是严格递增的，所以返回 false 。

示例 4：

输入：nums = [1,2,3]
输出：true
解释：[1,2,3] 已经是严格递增的，所以返回 true 。

 

提示：

    2 <= nums.length <= 1000
    1 <= nums[i] <= 1000


解：
可以只判断不是递增相邻的数，循环就少很多了。 98+

```py
class Solution:
    def canBeIncreasing(self, nums: List[int]) -> bool:
        def if_ok(n: List[int]) -> bool:
            for i in range(1, len(n)):
                if n[i - 1] >= n[i]:
                    return False
            return True

        for i in range(1, len(nums)):
            if nums[i - 1] >= nums[i]:
                return if_ok(nums[:i - 1] + nums[i:]) or if_ok(nums[:i] + nums[i + 1:])
        return True
```
---


1909. 删除一个元素使数组严格递增    --3

给你一个下标从 0 开始的整数数组 nums ，如果 恰好 删除 一个 元素后，数组 严格递增 ，那么请你返回 true ，否则返回 false 。如果数组本身已经是严格递增的，请你也返回 true 。

数组 nums 是 严格递增 的定义为：对于任意下标的 1 <= i < nums.length 都满足 nums[i - 1] < nums[i] 。

 

示例 1：

输入：nums = [1,2,10,5,7]
输出：true
解释：从 nums 中删除下标 2 处的 10 ，得到 [1,2,5,7] 。
[1,2,5,7] 是严格递增的，所以返回 true 。

示例 2：

输入：nums = [2,3,1,2]
输出：false
解释：
[3,1,2] 是删除下标 0 处元素后得到的结果。
[2,1,2] 是删除下标 1 处元素后得到的结果。
[2,3,2] 是删除下标 2 处元素后得到的结果。
[2,3,1] 是删除下标 3 处元素后得到的结果。
没有任何结果数组是严格递增的，所以返回 false 。

示例 3：

输入：nums = [1,1,1]
输出：false
解释：删除任意元素后的结果都是 [1,1] 。
[1,1] 不是严格递增的，所以返回 false 。

示例 4：

输入：nums = [1,2,3]
输出：true
解释：[1,2,3] 已经是严格递增的，所以返回 true 。

 

提示：

    2 <= nums.length <= 1000
    1 <= nums[i] <= 1000


解：
可以只判断不是递增相邻的数，循环就少很多了。 go语言, 91+
严重注意go语言的坑，切片是公用一个数据地址

```go
func canBeIncreasing(nums []int) bool {
	for i := 1; i < len(nums); i++ {
		if nums[i-1] >= nums[i] {
			i1 := make([]int, len(nums[:(i-1)]))
			copy(i1, nums[:(i-1)])
			i2 := nums[i:]
			a := append(i1, i2...)
			i3 := make([]int, len(nums[:i]))
			copy(i3, nums[:i])
			i4 := nums[(i + 1):]
			b := append(i3, i4...)
			return if_ok(a) || if_ok(b)
		}
	}
	return true
}

func if_ok(n []int) bool {
	for i := 1; i < len(n); i++ {
		if n[i-1] >= n[i] {
			return false
		}
	}
	return true
}

```
---
1200. 最小绝对差

给你个整数数组 arr，其中每个元素都 不相同。

请你找到所有具有最小绝对差的元素对，并且按升序的顺序返回。

 

示例 1：

输入：arr = [4,2,1,3]
输出：[[1,2],[2,3],[3,4]]

示例 2：

输入：arr = [1,3,6,10,15]
输出：[[1,3]]

示例 3：

输入：arr = [3,8,-10,23,19,-4,-14,27]
输出：[[-14,-10],[19,23],[23,27]]

 

提示：

    2 <= arr.length <= 10^5
    -10^6 <= arr[i] <= 10^6

解：先排序再放相邻差
```py
class Solution:
    def minimumAbsDifference(self, arr: List[int]) -> List[List[int]]:
        arr.sort()
        m = dict()
        the_min = 1000000
        for i in range(len(arr) - 1):
            v = arr[i + 1] - arr[i]
            k = str(arr[i]) + "," + str(arr[i + 1])
            m[k] = v
            if v <= the_min:
                the_min = v
        res = []
        for k, v in m.items():
            if v == the_min:
                res.append(k.split(","))
        return res
```
---


1200. 最小绝对差    --2

给你个整数数组 arr，其中每个元素都 不相同。

请你找到所有具有最小绝对差的元素对，并且按升序的顺序返回。

 

示例 1：

输入：arr = [4,2,1,3]
输出：[[1,2],[2,3],[3,4]]

示例 2：

输入：arr = [1,3,6,10,15]
输出：[[1,3]]

示例 3：

输入：arr = [3,8,-10,23,19,-4,-14,27]
输出：[[-14,-10],[19,23],[23,27]]

 

提示：

    2 <= arr.length <= 10^5
    -10^6 <= arr[i] <= 10^6

解：先排序再放相邻差,精简代码，不需要map，效率高99
```py
class Solution:
    def minimumAbsDifference(self, arr: List[int]) -> List[List[int]]:
        arr.sort()
        the_min = 1000000
        res = []
        for i in range(len(arr) - 1):
            v = arr[i + 1] - arr[i]
            if v < the_min:
                the_min = v
                res = [[arr[i], arr[i + 1]]]
            elif v == the_min:
                res.append([arr[i], arr[i + 1]])
        return res
```
---


1200. 最小绝对差    --3

给你个整数数组 arr，其中每个元素都 不相同。

请你找到所有具有最小绝对差的元素对，并且按升序的顺序返回。

 

示例 1：

输入：arr = [4,2,1,3]
输出：[[1,2],[2,3],[3,4]]

示例 2：

输入：arr = [1,3,6,10,15]
输出：[[1,3]]

示例 3：

输入：arr = [3,8,-10,23,19,-4,-14,27]
输出：[[-14,-10],[19,23],[23,27]]

 

提示：

    2 <= arr.length <= 10^5
    -10^6 <= arr[i] <= 10^6

解：先排序再放相邻差,精简代码，不需要map，go语言版,貌似自带排序输给了快速排序？
```go
func minimumAbsDifference(arr []int) [][]int {
    sort.Ints(arr)
    the_min := 1000000
    res := make([][]int, 0)
    for i := 0; i < len(arr) - 1; i ++{
        v := arr[i + 1] - arr[i]
        if v < the_min{
            the_min = v
            res = make([][]int, 0)
            res = append(res, []int{arr[i], arr[i + 1]})
        }else if v == the_min{
            res = append(res, []int{arr[i], arr[i + 1]})
        }
    }
    return res
}
```
---
1189. “气球” 的最大数量

给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 "balloon"（气球）。

字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 "balloon"。

 

示例 1：

输入：text = "nlaebolko"
输出：1

示例 2：

输入：text = "loonbalxballpoon"
输出：2

示例 3：

输入：text = "leetcode"
输出：0

 

提示：

    1 <= text.length <= 10^4
    text 全部由小写英文字母组成

解：
使用collections转map计算
```py
import collections

class Solution:
    def maxNumberOfBalloons(self, text: str) -> int:
        m = dict(collections.Counter(text))
        count = 0
        while True:
            if "b" in m and m["b"] >= 1:
                m["b"] -= 1
            else:
                break
            if "a" in m and m["a"] >= 1:
                m["a"] -= 1
            else:
                break
            if "l" in m and m["l"] >= 2:
                m["l"] -= 2
            else:
                break
            if "o" in m and m["o"] >= 2:
                m["o"] -= 2
            else:
                break
            if "n" in m and m["n"] >= 1:
                m["n"] -= 1
            else:
                break
            count += 1
        return count
```
---


1189. “气球” 的最大数量    --2

给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 "balloon"（气球）。

字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 "balloon"。

 

示例 1：

输入：text = "nlaebolko"
输出：1

示例 2：

输入：text = "loonbalxballpoon"
输出：2

示例 3：

输入：text = "leetcode"
输出：0

 

提示：

    1 <= text.length <= 10^4
    text 全部由小写英文字母组成

解：
使用collections 优化版本，其实是否满足主要看最少满足的那一个字母数量是多少
```py
import collections

class Solution:
    def maxNumberOfBalloons(self, text: str) -> int:
        d = collections.Counter(text)
        return min(d['b'], d['a'], d['l'] // 2, d['o'] // 2, d['n'])
```
---


1189. “气球” 的最大数量    --3

给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 "balloon"（气球）。

字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 "balloon"。

 

示例 1：

输入：text = "nlaebolko"
输出：1

示例 2：

输入：text = "loonbalxballpoon"
输出：2

示例 3：

输入：text = "leetcode"
输出：0

 

提示：

    1 <= text.length <= 10^4
    text 全部由小写英文字母组成

解：
go，其实是否满足主要看最少满足的那一个字母数量是多少, 双百,
```go
func maxNumberOfBalloons(text string) int {
    m := make(map[rune]int)
    for _, v := range text{
        m[v] += 1
    }
    c := []int{
        m['b'],
        m['a'],
        m['l'] / 2,
        m['o'] / 2,
        m['n'],
    }
    sort.Ints(c)
    return c[0]
}
```
---


1189. “气球” 的最大数量    --4

给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 "balloon"（气球）。

字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 "balloon"。

 

示例 1：

输入：text = "nlaebolko"
输出：1

示例 2：

输入：text = "loonbalxballpoon"
输出：2

示例 3：

输入：text = "leetcode"
输出：0

 

提示：

    1 <= text.length <= 10^4
    text 全部由小写英文字母组成

解：
go，其实是否满足主要看最少满足的那一个字母数量是多少, 双百,其实后面不用排序还要快
```go
func maxNumberOfBalloons(text string) int {
    m := make(map[rune]int)
    for _, v := range text{
        m[v] += 1
    }
    min := 10000
    if m['b'] <= min{
        min = m['b']
    }
    if m['a'] <= min{
        min = m['a']
    }
    if m['l'] / 2 <= min{
        min = m['l'] / 2
    }
    if m['o'] / 2 <= min{
        min = m['o'] / 2
    }
    if m['n'] <= min{
        min = m['n']
    }
    return min
}
```
---